//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System.Collections.Immutable;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace Azure.Files.Emulator.ShareNameDirectoryRestypeDirectoryCompList.DirectoryListFilesAndDirectoriesSegment.Responses._200;
/// <summary>
/// Generated from JSON Schema.
/// </summary>
/// <remarks>
/// <para>
/// An enumeration of directories and files.
/// </para>
/// </remarks>
public readonly partial struct ApplicationXml
{
    /// <summary>
    /// Generated from JSON Schema.
    /// </summary>
    /// <remarks>
    /// <para>
    /// Abstract for entries that can be listed from Directory.
    /// </para>
    /// </remarks>
    public readonly partial struct AbstractForEntriesThatCanBeListedFromDirectory
    {
        /// <summary>
        /// Generated from JSON Schema.
        /// </summary>
        public readonly partial struct AListedDirectoryItemArray
        {
            /// <summary>
            /// Generated from JSON Schema.
            /// </summary>
            /// <remarks>
            /// <para>
            /// A listed directory item.
            /// </para>
            /// </remarks>
            public readonly partial struct AListedDirectoryItem : IJsonObject<Azure.Files.Emulator.ShareNameDirectoryRestypeDirectoryCompList.DirectoryListFilesAndDirectoriesSegment.Responses._200.ApplicationXml.AbstractForEntriesThatCanBeListedFromDirectory.AListedDirectoryItemArray.AListedDirectoryItem>
            {
                /// <summary>
                /// Conversion from <see cref = "ImmutableList{JsonObjectProperty}"/>.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator AListedDirectoryItem(ImmutableList<JsonObjectProperty> value)
                {
                    return new(value);
                }

                /// <summary>
                /// Conversion to <see cref = "ImmutableList{JsonObjectProperty}"/>.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator ImmutableList<JsonObjectProperty>(AListedDirectoryItem value)
                {
                    return __CorvusObjectHelpers.GetPropertyBacking(value);
                }

                /// <summary>
                /// Conversion from JsonObject.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator AListedDirectoryItem(JsonObject value)
                {
                    if (value.HasDotnetBacking && value.ValueKind == JsonValueKind.Object)
                    {
                        return new(__CorvusObjectHelpers.GetPropertyBacking(value));
                    }

                    return new(value.AsJsonElement);
                }

                /// <summary>
                /// Conversion to JsonObject.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator JsonObject(AListedDirectoryItem value)
                {
                    return value.AsObject;
                }

                /// <inheritdoc/>
                public Corvus.Json.JsonAny this[in JsonPropertyName name]
                {
                    get
                    {
                        if (this.TryGetProperty(name, out Corvus.Json.JsonAny result))
                        {
                            return result;
                        }

                        throw new InvalidOperationException();
                    }
                }

                /// <summary>
                /// Gets the number of properties in the object.
                /// </summary>
                public int Count
                {
                    get
                    {
                        if ((this.backing & Backing.JsonElement) != 0)
                        {
                            return this.jsonElementBacking.GetPropertyCount();
                        }

                        if ((this.backing & Backing.Object) != 0)
                        {
                            return this.objectBacking.Count;
                        }

                        throw new InvalidOperationException();
                    }
                }

                /// <summary>
                /// Gets the (optional) <c>Attributes</c> property.
                /// </summary>
                /// <remarks>
                /// <para>
                /// If this JSON property is <see cref = "JsonValueKind.Undefined"/> then the value returned will be <see langword="null"/>.
                /// </para>
                /// </remarks>
                public Corvus.Json.JsonString? Attributes
                {
                    get
                    {
                        if ((this.backing & Backing.JsonElement) != 0)
                        {
                            if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                            {
                                return default;
                            }

                            if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.AttributesUtf8, out JsonElement result))
                            {
                                if (result.ValueKind == JsonValueKind.Null || result.ValueKind == JsonValueKind.Undefined)
                                {
                                    return default;
                                }

                                return new(result);
                            }
                        }

                        if ((this.backing & Backing.Object) != 0)
                        {
                            if (this.objectBacking.TryGetValue(JsonPropertyNames.Attributes, out JsonAny result))
                            {
                                if (result.IsNullOrUndefined())
                                {
                                    return default;
                                }

                                return result.As<Corvus.Json.JsonString>();
                            }
                        }

                        return default;
                    }
                }

                /// <summary>
                /// Gets the (optional) <c>FileId</c> property.
                /// </summary>
                /// <remarks>
                /// <para>
                /// If this JSON property is <see cref = "JsonValueKind.Undefined"/> then the value returned will be <see langword="null"/>.
                /// </para>
                /// </remarks>
                public Corvus.Json.JsonString? FileId
                {
                    get
                    {
                        if ((this.backing & Backing.JsonElement) != 0)
                        {
                            if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                            {
                                return default;
                            }

                            if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.FileIdUtf8, out JsonElement result))
                            {
                                if (result.ValueKind == JsonValueKind.Null || result.ValueKind == JsonValueKind.Undefined)
                                {
                                    return default;
                                }

                                return new(result);
                            }
                        }

                        if ((this.backing & Backing.Object) != 0)
                        {
                            if (this.objectBacking.TryGetValue(JsonPropertyNames.FileId, out JsonAny result))
                            {
                                if (result.IsNullOrUndefined())
                                {
                                    return default;
                                }

                                return result.As<Corvus.Json.JsonString>();
                            }
                        }

                        return default;
                    }
                }

                /// <summary>
                /// Gets the <c>Name</c> property.
                /// </summary>
                /// <remarks>
                /// <para>
                /// If the instance is valid, this property will not be <see cref = "JsonValueKind.Undefined"/>.
                /// </para>
                /// </remarks>
                public Azure.Files.Emulator.ShareNameDirectoryRestypeDirectoryCompList.DirectoryListFilesAndDirectoriesSegment.Responses._200.ApplicationXml.AbstractForEntriesThatCanBeListedFromDirectory.AListedDirectoryItemArray.AListedDirectoryItem.NameEntity Name
                {
                    get
                    {
                        if ((this.backing & Backing.JsonElement) != 0)
                        {
                            if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                            {
                                return default;
                            }

                            if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.NameUtf8, out JsonElement result))
                            {
                                return new(result);
                            }
                        }

                        if ((this.backing & Backing.Object) != 0)
                        {
                            if (this.objectBacking.TryGetValue(JsonPropertyNames.Name, out JsonAny result))
                            {
                                return result.As<Azure.Files.Emulator.ShareNameDirectoryRestypeDirectoryCompList.DirectoryListFilesAndDirectoriesSegment.Responses._200.ApplicationXml.AbstractForEntriesThatCanBeListedFromDirectory.AListedDirectoryItemArray.AListedDirectoryItem.NameEntity>();
                            }
                        }

                        return default;
                    }
                }

                /// <summary>
                /// Gets the (optional) <c>PermissionKey</c> property.
                /// </summary>
                /// <remarks>
                /// <para>
                /// If this JSON property is <see cref = "JsonValueKind.Undefined"/> then the value returned will be <see langword="null"/>.
                /// </para>
                /// </remarks>
                public Corvus.Json.JsonString? PermissionKey
                {
                    get
                    {
                        if ((this.backing & Backing.JsonElement) != 0)
                        {
                            if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                            {
                                return default;
                            }

                            if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.PermissionKeyUtf8, out JsonElement result))
                            {
                                if (result.ValueKind == JsonValueKind.Null || result.ValueKind == JsonValueKind.Undefined)
                                {
                                    return default;
                                }

                                return new(result);
                            }
                        }

                        if ((this.backing & Backing.Object) != 0)
                        {
                            if (this.objectBacking.TryGetValue(JsonPropertyNames.PermissionKey, out JsonAny result))
                            {
                                if (result.IsNullOrUndefined())
                                {
                                    return default;
                                }

                                return result.As<Corvus.Json.JsonString>();
                            }
                        }

                        return default;
                    }
                }

                /// <summary>
                /// Gets the (optional) <c>Properties</c> property.
                /// </summary>
                /// <remarks>
                /// <para>
                /// If this JSON property is <see cref = "JsonValueKind.Undefined"/> then the value returned will be <see langword="null"/>.
                /// </para>
                /// <para>
                /// File properties.
                /// </para>
                /// </remarks>
                public Azure.Files.Emulator.ShareNameDirectoryRestypeDirectoryCompList.DirectoryListFilesAndDirectoriesSegment.Responses._200.ApplicationXml.AbstractForEntriesThatCanBeListedFromDirectory.AListedDirectoryItemArray.AListedDirectoryItem.FileProperties? Properties
                {
                    get
                    {
                        if ((this.backing & Backing.JsonElement) != 0)
                        {
                            if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                            {
                                return default;
                            }

                            if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.PropertiesUtf8, out JsonElement result))
                            {
                                if (result.ValueKind == JsonValueKind.Null || result.ValueKind == JsonValueKind.Undefined)
                                {
                                    return default;
                                }

                                return new(result);
                            }
                        }

                        if ((this.backing & Backing.Object) != 0)
                        {
                            if (this.objectBacking.TryGetValue(JsonPropertyNames.Properties, out JsonAny result))
                            {
                                if (result.IsNullOrUndefined())
                                {
                                    return default;
                                }

                                return result.As<Azure.Files.Emulator.ShareNameDirectoryRestypeDirectoryCompList.DirectoryListFilesAndDirectoriesSegment.Responses._200.ApplicationXml.AbstractForEntriesThatCanBeListedFromDirectory.AListedDirectoryItemArray.AListedDirectoryItem.FileProperties>();
                            }
                        }

                        return default;
                    }
                }

                /// <inheritdoc/>
                public static AListedDirectoryItem FromProperties(IDictionary<JsonPropertyName, JsonAny> source)
                {
                    return new(source.Select(kvp => new JsonObjectProperty(kvp.Key, kvp.Value)).ToImmutableList());
                }

                /// <inheritdoc/>
                public static AListedDirectoryItem FromProperties(params (JsonPropertyName Name, JsonAny Value)[] source)
                {
                    return new(source.Select(s => new JsonObjectProperty(s.Name, s.Value.AsAny)).ToImmutableList());
                }

                /// <summary>
                /// Creates an instance of the type from the given immutable list of properties.
                /// </summary>
                /// <param name = "source">The list of properties.</param>
                /// <returns>An instance of the type initialized from the list of properties.</returns>
                public static AListedDirectoryItem FromProperties(ImmutableList<JsonObjectProperty> source)
                {
                    return new(source);
                }

                /// <summary>
                /// Creates an instance of a <see cref = "AListedDirectoryItem"/>.
                /// </summary>
                public static AListedDirectoryItem Create(in Azure.Files.Emulator.ShareNameDirectoryRestypeDirectoryCompList.DirectoryListFilesAndDirectoriesSegment.Responses._200.ApplicationXml.AbstractForEntriesThatCanBeListedFromDirectory.AListedDirectoryItemArray.AListedDirectoryItem.NameEntity name, in Corvus.Json.JsonString? attributes = null, in Corvus.Json.JsonString? fileId = null, in Corvus.Json.JsonString? permissionKey = null, in Azure.Files.Emulator.ShareNameDirectoryRestypeDirectoryCompList.DirectoryListFilesAndDirectoriesSegment.Responses._200.ApplicationXml.AbstractForEntriesThatCanBeListedFromDirectory.AListedDirectoryItemArray.AListedDirectoryItem.FileProperties? properties = null)
                {
                    var builder = ImmutableList.CreateBuilder<JsonObjectProperty>();
                    builder.Add(JsonPropertyNames.Name, name.AsAny);
                    if (attributes is not null)
                    {
                        builder.Add(JsonPropertyNames.Attributes, attributes.Value.AsAny);
                    }

                    if (fileId is not null)
                    {
                        builder.Add(JsonPropertyNames.FileId, fileId.Value.AsAny);
                    }

                    if (permissionKey is not null)
                    {
                        builder.Add(JsonPropertyNames.PermissionKey, permissionKey.Value.AsAny);
                    }

                    if (properties is not null)
                    {
                        builder.Add(JsonPropertyNames.Properties, properties.Value.AsAny);
                    }

                    return new(builder.ToImmutable());
                }

                /// <inheritdoc/>
                public ImmutableList<JsonObjectProperty> AsPropertyBacking()
                {
                    return __CorvusObjectHelpers.GetPropertyBacking(this);
                }

                /// <inheritdoc/>
                public ImmutableList<JsonObjectProperty>.Builder AsPropertyBackingBuilder()
                {
                    return __CorvusObjectHelpers.GetPropertyBacking(this).ToBuilder();
                }

                /// <inheritdoc/>
                public JsonObjectEnumerator EnumerateObject()
                {
                    if ((this.backing & Backing.JsonElement) != 0)
                    {
                        return new(this.jsonElementBacking);
                    }

                    if ((this.backing & Backing.Object) != 0)
                    {
                        return new(this.objectBacking);
                    }

                    throw new InvalidOperationException();
                }

                /// <inheritdoc/>
                public bool HasProperties()
                {
                    if ((this.backing & Backing.Object) != 0)
                    {
                        return this.objectBacking.Count > 0;
                    }

                    if ((this.backing & Backing.JsonElement) != 0)
                    {
                        using JsonElement.ObjectEnumerator enumerator = this.jsonElementBacking.EnumerateObject();
                        return enumerator.MoveNext();
                    }

                    throw new InvalidOperationException();
                }

                /// <inheritdoc/>
                public bool HasProperty(in JsonPropertyName name)
                {
                    if ((this.backing & Backing.Object) != 0)
                    {
                        return this.objectBacking.ContainsKey(name);
                    }

                    if ((this.backing & Backing.JsonElement) != 0)
                    {
                        return name.TryGetProperty(this.jsonElementBacking, out JsonElement _);
                    }

                    throw new InvalidOperationException();
                }

                /// <inheritdoc/>
                public bool HasProperty(string name)
                {
                    if ((this.backing & Backing.Object) != 0)
                    {
                        return this.objectBacking.ContainsKey(name);
                    }

                    if ((this.backing & Backing.JsonElement) != 0)
                    {
                        return this.jsonElementBacking.TryGetProperty(name, out _);
                    }

                    throw new InvalidOperationException();
                }

                /// <inheritdoc/>
                public bool HasProperty(ReadOnlySpan<char> name)
                {
                    if ((this.backing & Backing.Object) != 0)
                    {
                        return this.objectBacking.ContainsKey(name);
                    }

                    if ((this.backing & Backing.JsonElement) != 0)
                    {
                        return this.jsonElementBacking.TryGetProperty(name, out _);
                    }

                    throw new InvalidOperationException();
                }

                /// <inheritdoc/>
                public bool HasProperty(ReadOnlySpan<byte> name)
                {
                    if ((this.backing & Backing.Object) != 0)
                    {
                        return this.objectBacking.ContainsKey(name);
                    }

                    if ((this.backing & Backing.JsonElement) != 0)
                    {
                        return this.jsonElementBacking.TryGetProperty(name, out _);
                    }

                    throw new InvalidOperationException();
                }

                /// <summary>
                /// Sets the (optional) <c>Attributes</c> property.
                /// </summary>
                /// <param name = "value">The new property value</param>
                /// <returns>The instance with the property set.</returns>
                public AListedDirectoryItem WithAttributes(in Corvus.Json.JsonString? value)
                {
                    return value.HasValue ? this.SetProperty(JsonPropertyNames.Attributes, value.Value) : this.RemoveProperty(JsonPropertyNames.Attributes);
                }

                /// <summary>
                /// Sets the (optional) <c>FileId</c> property.
                /// </summary>
                /// <param name = "value">The new property value</param>
                /// <returns>The instance with the property set.</returns>
                public AListedDirectoryItem WithFileId(in Corvus.Json.JsonString? value)
                {
                    return value.HasValue ? this.SetProperty(JsonPropertyNames.FileId, value.Value) : this.RemoveProperty(JsonPropertyNames.FileId);
                }

                /// <summary>
                /// Sets the <c>Name</c> property.
                /// </summary>
                /// <param name = "value">The new property value</param>
                /// <returns>The instance with the property set.</returns>
                public AListedDirectoryItem WithName(in Azure.Files.Emulator.ShareNameDirectoryRestypeDirectoryCompList.DirectoryListFilesAndDirectoriesSegment.Responses._200.ApplicationXml.AbstractForEntriesThatCanBeListedFromDirectory.AListedDirectoryItemArray.AListedDirectoryItem.NameEntity value)
                {
                    return this.SetProperty(JsonPropertyNames.Name, value);
                }

                /// <summary>
                /// Sets the (optional) <c>PermissionKey</c> property.
                /// </summary>
                /// <param name = "value">The new property value</param>
                /// <returns>The instance with the property set.</returns>
                public AListedDirectoryItem WithPermissionKey(in Corvus.Json.JsonString? value)
                {
                    return value.HasValue ? this.SetProperty(JsonPropertyNames.PermissionKey, value.Value) : this.RemoveProperty(JsonPropertyNames.PermissionKey);
                }

                /// <summary>
                /// Sets the (optional) <c>Properties</c> property.
                /// </summary>
                /// <param name = "value">The new property value</param>
                /// <returns>The instance with the property set.</returns>
                /// <remarks>
                /// <para>
                /// File properties.
                /// </para>
                /// </remarks>
                public AListedDirectoryItem WithProperties(in Azure.Files.Emulator.ShareNameDirectoryRestypeDirectoryCompList.DirectoryListFilesAndDirectoriesSegment.Responses._200.ApplicationXml.AbstractForEntriesThatCanBeListedFromDirectory.AListedDirectoryItemArray.AListedDirectoryItem.FileProperties? value)
                {
                    return value.HasValue ? this.SetProperty(JsonPropertyNames.Properties, value.Value) : this.RemoveProperty(JsonPropertyNames.Properties);
                }

                /// <summary>
                /// Get a property.
                /// </summary>
                /// <param name = "name">The name of the property.</param>
                /// <param name = "value">The value of the property.</param>
                /// <returns><c>True</c> if the property was present.</returns>
                /// <exception cref = "InvalidOperationException">The value is not an object.</exception>
                public bool TryGetProperty(in JsonPropertyName name, out JsonAny value)
                {
                    if ((this.backing & Backing.JsonElement) != 0)
                    {
                        if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                        {
                            value = default;
                            return false;
                        }

                        if (name.TryGetProperty(this.jsonElementBacking, out JsonElement element))
                        {
                            value = new(element);
                            return true;
                        }

                        value = default;
                        return false;
                    }

                    if ((this.backing & Backing.Object) != 0)
                    {
                        if (this.objectBacking.TryGetValue(name, out JsonAny result))
                        {
                            value = result;
                            return true;
                        }

                        value = default;
                        return false;
                    }

                    throw new InvalidOperationException();
                }

                /// <summary>
                /// Get a property.
                /// </summary>
                /// <param name = "name">The name of the property.</param>
                /// <param name = "value">The value of the property.</param>
                /// <returns><c>True</c> if the property was present.</returns>
                /// <exception cref = "InvalidOperationException">The value is not an object.</exception>
                public bool TryGetProperty(string name, out JsonAny value)
                {
                    if ((this.backing & Backing.JsonElement) != 0)
                    {
                        if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                        {
                            value = default;
                            return false;
                        }

                        if (this.jsonElementBacking.TryGetProperty(name, out JsonElement element))
                        {
                            value = new(element);
                            return true;
                        }

                        value = default;
                        return false;
                    }

                    if ((this.backing & Backing.Object) != 0)
                    {
                        if (this.objectBacking.TryGetValue(name, out JsonAny result))
                        {
                            value = result;
                            return true;
                        }

                        value = default;
                        return false;
                    }

                    throw new InvalidOperationException();
                }

                /// <summary>
                /// Get a property.
                /// </summary>
                /// <param name = "name">The name of the property.</param>
                /// <param name = "value">The value of the property.</param>
                /// <returns><c>True</c> if the property was present.</returns>
                /// <exception cref = "InvalidOperationException">The value is not an object.</exception>
                public bool TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)
                {
                    if ((this.backing & Backing.JsonElement) != 0)
                    {
                        if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                        {
                            value = default;
                            return false;
                        }

                        if (this.jsonElementBacking.TryGetProperty(name, out JsonElement element))
                        {
                            value = new(element);
                            return true;
                        }

                        value = default;
                        return false;
                    }

                    if ((this.backing & Backing.Object) != 0)
                    {
                        if (this.objectBacking.TryGetValue(name, out JsonAny result))
                        {
                            value = result;
                            return true;
                        }

                        value = default;
                        return false;
                    }

                    throw new InvalidOperationException();
                }

                /// <summary>
                /// Get a property.
                /// </summary>
                /// <param name = "name">The name of the property.</param>
                /// <param name = "value">The value of the property.</param>
                /// <returns><c>True</c> if the property was present.</returns>
                /// <exception cref = "InvalidOperationException">The value is not an object.</exception>
                public bool TryGetProperty(ReadOnlySpan<byte> name, out JsonAny value)
                {
                    if ((this.backing & Backing.JsonElement) != 0)
                    {
                        if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                        {
                            value = default;
                            return false;
                        }

                        if (this.jsonElementBacking.TryGetProperty(name, out JsonElement element))
                        {
                            value = new(element);
                            return true;
                        }

                        value = default;
                        return false;
                    }

                    if ((this.backing & Backing.Object) != 0)
                    {
                        if (this.objectBacking.TryGetValue(name, out JsonAny result))
                        {
                            value = result;
                            return true;
                        }

                        value = default;
                        return false;
                    }

                    throw new InvalidOperationException();
                }

                /// <inheritdoc/>
                public bool TryGetProperty<TValue>(in JsonPropertyName name, out TValue value)
                    where TValue : struct, IJsonValue<TValue>
                {
                    if ((this.backing & Backing.JsonElement) != 0)
                    {
                        if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                        {
                            value = default;
                            return false;
                        }

                        if (name.TryGetProperty(this.jsonElementBacking, out JsonElement element))
                        {
#if NET8_0_OR_GREATER
                            value = TValue.FromJson(element);
#else
                            value = JsonValueNetStandard20Extensions.FromJsonElement<TValue>(element);
#endif
                            return true;
                        }

                        value = default;
                        return false;
                    }

                    if ((this.backing & Backing.Object) != 0)
                    {
                        if (this.objectBacking.TryGetValue(name, out JsonAny result))
                        {
#if NET8_0_OR_GREATER
                            value = TValue.FromAny(result);
#else
                            value = result.As<TValue>();
#endif
                            return true;
                        }

                        value = default;
                        return false;
                    }

                    throw new InvalidOperationException();
                }

                /// <inheritdoc/>
                public bool TryGetProperty<TValue>(string name, out TValue value)
                    where TValue : struct, IJsonValue<TValue>
                {
                    if ((this.backing & Backing.JsonElement) != 0)
                    {
                        if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                        {
                            value = default;
                            return false;
                        }

                        if (this.jsonElementBacking.TryGetProperty(name, out JsonElement element))
                        {
#if NET8_0_OR_GREATER
                            value = TValue.FromJson(element);
#else
                            value = JsonValueNetStandard20Extensions.FromJsonElement<TValue>(element);
#endif
                            return true;
                        }

                        value = default;
                        return false;
                    }

                    if ((this.backing & Backing.Object) != 0)
                    {
                        if (this.objectBacking.TryGetValue(name, out JsonAny result))
                        {
#if NET8_0_OR_GREATER
                            value = TValue.FromAny(result);
#else
                            value = result.As<TValue>();
#endif
                            return true;
                        }

                        value = default;
                        return false;
                    }

                    throw new InvalidOperationException();
                }

                /// <inheritdoc/>
                public bool TryGetProperty<TValue>(ReadOnlySpan<char> name, out TValue value)
                    where TValue : struct, IJsonValue<TValue>
                {
                    if ((this.backing & Backing.JsonElement) != 0)
                    {
                        if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                        {
                            value = default;
                            return false;
                        }

                        if (this.jsonElementBacking.TryGetProperty(name, out JsonElement element))
                        {
#if NET8_0_OR_GREATER
                            value = TValue.FromJson(element);
#else
                            value = JsonValueNetStandard20Extensions.FromJsonElement<TValue>(element);
#endif
                            return true;
                        }

                        value = default;
                        return false;
                    }

                    if ((this.backing & Backing.Object) != 0)
                    {
                        if (this.objectBacking.TryGetValue(name, out JsonAny result))
                        {
#if NET8_0_OR_GREATER
                            value = TValue.FromAny(result);
#else
                            value = result.As<TValue>();
#endif
                            return true;
                        }

                        value = default;
                        return false;
                    }

                    throw new InvalidOperationException();
                }

                /// <inheritdoc/>
                public bool TryGetProperty<TValue>(ReadOnlySpan<byte> name, out TValue value)
                    where TValue : struct, IJsonValue<TValue>
                {
                    if ((this.backing & Backing.JsonElement) != 0)
                    {
                        if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                        {
                            value = default;
                            return false;
                        }

                        if (this.jsonElementBacking.TryGetProperty(name, out JsonElement element))
                        {
#if NET8_0_OR_GREATER
                            value = TValue.FromJson(element);
#else
                            value = JsonValueNetStandard20Extensions.FromJsonElement<TValue>(element);
#endif
                            return true;
                        }

                        value = default;
                        return false;
                    }

                    if ((this.backing & Backing.Object) != 0)
                    {
                        if (this.objectBacking.TryGetValue(name, out JsonAny result))
                        {
#if NET8_0_OR_GREATER
                            value = TValue.FromAny(result);
#else
                            value = result.As<TValue>();
#endif
                            return true;
                        }

                        value = default;
                        return false;
                    }

                    throw new InvalidOperationException();
                }

                /// <inheritdoc/>
                public AListedDirectoryItem SetProperty<TValue>(in JsonPropertyName name, TValue value)
                    where TValue : struct, IJsonValue
                {
                    return new(__CorvusObjectHelpers.GetPropertyBackingWith(this, name, value.AsAny));
                }

                /// <inheritdoc/>
                public AListedDirectoryItem RemoveProperty(in JsonPropertyName name)
                {
                    return new(__CorvusObjectHelpers.GetPropertyBackingWithout(this, name));
                }

                /// <inheritdoc/>
                public AListedDirectoryItem RemoveProperty(string name)
                {
                    return new(__CorvusObjectHelpers.GetPropertyBackingWithout(this, name));
                }

                /// <inheritdoc/>
                public AListedDirectoryItem RemoveProperty(ReadOnlySpan<char> name)
                {
                    return new(__CorvusObjectHelpers.GetPropertyBackingWithout(this, name));
                }

                /// <inheritdoc/>
                public AListedDirectoryItem RemoveProperty(ReadOnlySpan<byte> name)
                {
                    return new(__CorvusObjectHelpers.GetPropertyBackingWithout(this, name));
                }

                /// <summary>
                /// Provides UTF8 and string versions of the JSON property names on the object.
                /// </summary>
                public static class JsonPropertyNames
                {
                    /// <summary>
                    /// Gets the JSON property name for <see cref = "Attributes"/>.
                    /// </summary>
                    public const string Attributes = "Attributes";
                    /// <summary>
                    /// Gets the JSON property name for <see cref = "FileId"/>.
                    /// </summary>
                    public const string FileId = "FileId";
                    /// <summary>
                    /// Gets the JSON property name for <see cref = "Name"/>.
                    /// </summary>
                    public const string Name = "Name";
                    /// <summary>
                    /// Gets the JSON property name for <see cref = "PermissionKey"/>.
                    /// </summary>
                    public const string PermissionKey = "PermissionKey";
                    /// <summary>
                    /// Gets the JSON property name for <see cref = "Properties"/>.
                    /// </summary>
                    public const string Properties = "Properties";
                    /// <summary>
                    /// Gets the JSON property name for <see cref = "Attributes"/>.
                    /// </summary>
                    public static ReadOnlySpan<byte> AttributesUtf8 => "Attributes"u8;
                    /// <summary>
                    /// Gets the JSON property name for <see cref = "FileId"/>.
                    /// </summary>
                    public static ReadOnlySpan<byte> FileIdUtf8 => "FileId"u8;
                    /// <summary>
                    /// Gets the JSON property name for <see cref = "Name"/>.
                    /// </summary>
                    public static ReadOnlySpan<byte> NameUtf8 => "Name"u8;
                    /// <summary>
                    /// Gets the JSON property name for <see cref = "PermissionKey"/>.
                    /// </summary>
                    public static ReadOnlySpan<byte> PermissionKeyUtf8 => "PermissionKey"u8;
                    /// <summary>
                    /// Gets the JSON property name for <see cref = "Properties"/>.
                    /// </summary>
                    public static ReadOnlySpan<byte> PropertiesUtf8 => "Properties"u8;
                }

                private static class __CorvusObjectHelpers
                {
                    /// <summary>
                    /// Builds an <see cref = "ImmutableList{JsonObjectProperty}"/> from the object.
                    /// </summary>
                    /// <returns>An immutable list of <see cref = "JsonAny"/> built from the object.</returns>
                    /// <exception cref = "InvalidOperationException">The value is not an object.</exception>
                    public static ImmutableList<JsonObjectProperty> GetPropertyBacking(in AListedDirectoryItem that)
                    {
                        if ((that.backing & Backing.Object) != 0)
                        {
                            return that.objectBacking;
                        }

                        if ((that.backing & Backing.JsonElement) != 0)
                        {
                            return PropertyBackingBuilders.GetPropertyBackingBuilder(that.jsonElementBacking).ToImmutable();
                        }

                        throw new InvalidOperationException();
                    }

                    /// <summary>
                    /// Builds an <see cref = "ImmutableList{JsonObjectProperty}"/> from the object, without a specific property.
                    /// </summary>
                    /// <returns>An immutable list of <see cref = "JsonObjectProperty"/>, built from the existing object, without the given property.</returns>
                    /// <exception cref = "InvalidOperationException">The value is not an object.</exception>
                    public static ImmutableList<JsonObjectProperty> GetPropertyBackingWithout(in AListedDirectoryItem that, in JsonPropertyName name)
                    {
                        if ((that.backing & Backing.Object) != 0)
                        {
                            return that.objectBacking.Remove(name);
                        }

                        if ((that.backing & Backing.JsonElement) != 0)
                        {
                            return PropertyBackingBuilders.GetPropertyBackingBuilderWithout(that.jsonElementBacking, name).ToImmutable();
                        }

                        throw new InvalidOperationException();
                    }

                    /// <summary>
                    /// Builds an <see cref = "ImmutableList{JsonObjectProperty}"/> from the object, without a specific property.
                    /// </summary>
                    /// <returns>An immutable list of <see cref = "JsonObjectProperty"/>, built from the existing object, without the given property.</returns>
                    /// <exception cref = "InvalidOperationException">The value is not an object.</exception>
                    public static ImmutableList<JsonObjectProperty> GetPropertyBackingWithout(in AListedDirectoryItem that, ReadOnlySpan<char> name)
                    {
                        if ((that.backing & Backing.Object) != 0)
                        {
                            return that.objectBacking.Remove(name);
                        }

                        if ((that.backing & Backing.JsonElement) != 0)
                        {
                            return PropertyBackingBuilders.GetPropertyBackingBuilderWithout(that.jsonElementBacking, name).ToImmutable();
                        }

                        throw new InvalidOperationException();
                    }

                    /// <summary>
                    /// Builds an <see cref = "ImmutableList{JsonObjectProperty}"/> from the object, without a specific property.
                    /// </summary>
                    /// <returns>An immutable list of <see cref = "JsonObjectProperty"/>, built from the existing object, without the given property.</returns>
                    /// <exception cref = "InvalidOperationException">The value is not an object.</exception>
                    public static ImmutableList<JsonObjectProperty> GetPropertyBackingWithout(in AListedDirectoryItem that, ReadOnlySpan<byte> name)
                    {
                        if ((that.backing & Backing.Object) != 0)
                        {
                            return that.objectBacking.Remove(name);
                        }

                        if ((that.backing & Backing.JsonElement) != 0)
                        {
                            return PropertyBackingBuilders.GetPropertyBackingBuilderWithout(that.jsonElementBacking, name).ToImmutable();
                        }

                        throw new InvalidOperationException();
                    }

                    /// <summary>
                    /// Builds an <see cref = "ImmutableList{JsonObjectProperty}"/> from the object, without a specific property.
                    /// </summary>
                    /// <returns>An immutable list of <see cref = "JsonObjectProperty"/>, built from the existing object, without the given property.</returns>
                    /// <exception cref = "InvalidOperationException">The value is not an object.</exception>
                    public static ImmutableList<JsonObjectProperty> GetPropertyBackingWithout(in AListedDirectoryItem that, string name)
                    {
                        if ((that.backing & Backing.Object) != 0)
                        {
                            return that.objectBacking.Remove(name);
                        }

                        if ((that.backing & Backing.JsonElement) != 0)
                        {
                            return PropertyBackingBuilders.GetPropertyBackingBuilderWithout(that.jsonElementBacking, name).ToImmutable();
                        }

                        throw new InvalidOperationException();
                    }

                    /// <summary>
                    /// Builds an <see cref = "ImmutableList{JsonObjectProperty}"/> from the object, without a specific property.
                    /// </summary>
                    /// <returns>An immutable list of <see cref = "JsonObjectProperty"/>, built from the existing object, with the given property.</returns>
                    /// <exception cref = "InvalidOperationException">The value is not an object.</exception>
                    public static ImmutableList<JsonObjectProperty> GetPropertyBackingWith(in AListedDirectoryItem that, in JsonPropertyName name, in JsonAny value)
                    {
                        if ((that.backing & Backing.Object) != 0)
                        {
                            return that.objectBacking.SetItem(name, value);
                        }

                        if ((that.backing & Backing.JsonElement) != 0)
                        {
                            return PropertyBackingBuilders.GetPropertyBackingBuilderReplacing(that.jsonElementBacking, name, value).ToImmutable();
                        }

                        throw new InvalidOperationException();
                    }
                }
            }
        }
    }
}
