//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

using System.Collections.Immutable;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace ShareNameDirectoryCompListhandles.DirectoryListHandles.ResponseBodies._200;

/// <summary>
/// Generated from JSON Schema.
/// </summary>
/// <remarks>
/// <para>
/// An enumeration of handles.
/// </para>
/// </remarks>
public readonly partial struct ApplicationXml
{
    /// <summary>
    /// Generated from JSON Schema.
    /// </summary>
    public readonly partial struct AListedAzureStorageHandleItemArray
    {
        /// <summary>
        /// Generated from JSON Schema.
        /// </summary>
        /// <remarks>
        /// <para>
        /// A listed Azure Storage handle item.
        /// </para>
        /// </remarks>
        public readonly partial struct AListedAzureStorageHandleItem
            : IJsonObject<ShareNameDirectoryCompListhandles.DirectoryListHandles.ResponseBodies._200.ApplicationXml.AListedAzureStorageHandleItemArray.AListedAzureStorageHandleItem>
        {
            /// <summary>
            /// Conversion from <see cref="ImmutableList{JsonObjectProperty}"/>.
            /// </summary>
            /// <param name="value">The value from which to convert.</param>
            public static implicit operator AListedAzureStorageHandleItem(ImmutableList<JsonObjectProperty> value)
            {
                return new(value);
            }

            /// <summary>
            /// Conversion to <see cref="ImmutableList{JsonObjectProperty}"/>.
            /// </summary>
            /// <param name="value">The value from which to convert.</param>
            public static implicit operator ImmutableList<JsonObjectProperty>(AListedAzureStorageHandleItem value)
            {
                return
                    __CorvusObjectHelpers.GetPropertyBacking(value);
            }

            /// <summary>
            /// Conversion from JsonObject.
            /// </summary>
            /// <param name="value">The value from which to convert.</param>
            public static implicit operator AListedAzureStorageHandleItem(JsonObject value)
            {
                if (value.HasDotnetBacking && value.ValueKind == JsonValueKind.Object)
                {
                    return new(
                        __CorvusObjectHelpers.GetPropertyBacking(value));
                }

                return new(value.AsJsonElement);
            }

            /// <summary>
            /// Conversion to JsonObject.
            /// </summary>
            /// <param name="value">The value from which to convert.</param>
            public static implicit operator JsonObject(AListedAzureStorageHandleItem value)
            {
                return
                    value.AsObject;
            }

            /// <inheritdoc/>
            public Corvus.Json.JsonAny this[in JsonPropertyName name]
            {
                get
                {
                    if (this.TryGetProperty(name, out Corvus.Json.JsonAny result))
                    {
                        return result;
                    }

                    throw new InvalidOperationException();
                }
            }

            /// <summary>
            /// Gets the number of properties in the object.
            /// </summary>
            public int Count
            {
                get
                {
                    if ((this.backing & Backing.JsonElement) != 0)
                    {
                        return this.jsonElementBacking.GetPropertyCount();
                    }

                    if ((this.backing & Backing.Object) != 0)
                    {
                        return this.objectBacking.Count;
                    }

                    throw new InvalidOperationException();
                }
            }

            /// <summary>
            /// Gets the (optional) <c>AccessRightList</c> property.
            /// </summary>
            /// <remarks>
            /// <para>
            /// If this JSON property is <see cref="JsonValueKind.Undefined"/> then the value returned will be <see langword="null" />.
            /// </para>
            /// </remarks>
            public ShareNameDirectoryCompListhandles.DirectoryListHandles.ResponseBodies._200.ApplicationXml.AListedAzureStorageHandleItemArray.AListedAzureStorageHandleItem.AccessRightsOfTheAccessPolicyArray? AccessRightList
            {
                get
                {
                    if ((this.backing & Backing.JsonElement) != 0)
                    {
                        if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                        {
                            return default;
                        }

                        if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.AccessRightListUtf8, out JsonElement result))
                        {
                            if (result.ValueKind == JsonValueKind.Null || result.ValueKind == JsonValueKind.Undefined)
                            {
                                return default;
                            }

                            return new(result);
                        }
                    }

                    if ((this.backing & Backing.Object) != 0)
                    {
                        if (this.objectBacking.TryGetValue(JsonPropertyNames.AccessRightList, out JsonAny result))
                        {
                            if (result.IsNullOrUndefined())
                            {
                                return default;
                            }

                            return result.As<ShareNameDirectoryCompListhandles.DirectoryListHandles.ResponseBodies._200.ApplicationXml.AListedAzureStorageHandleItemArray.AListedAzureStorageHandleItem.AccessRightsOfTheAccessPolicyArray>();
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets the <c>ClientIp</c> property.
            /// </summary>
            /// <remarks>
            /// <para>
            /// If the instance is valid, this property will not be <see cref="JsonValueKind.Undefined"/>.
            /// </para>
            /// <para>
            /// Client IP that opened the handle
            /// </para>
            /// </remarks>
            public Corvus.Json.JsonString ClientIp
            {
                get
                {
                    if ((this.backing & Backing.JsonElement) != 0)
                    {
                        if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                        {
                            return default;
                        }

                        if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.ClientIpUtf8, out JsonElement result))
                        {
                            return new(result);
                        }
                    }

                    if ((this.backing & Backing.Object) != 0)
                    {
                        if (this.objectBacking.TryGetValue(JsonPropertyNames.ClientIp, out JsonAny result))
                        {
                            return result.As<Corvus.Json.JsonString>();
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets the <c>ClientName</c> property.
            /// </summary>
            /// <remarks>
            /// <para>
            /// If the instance is valid, this property will not be <see cref="JsonValueKind.Undefined"/>.
            /// </para>
            /// <para>
            /// Name of the client machine where the share is being mounted
            /// </para>
            /// </remarks>
            public Corvus.Json.JsonString ClientName
            {
                get
                {
                    if ((this.backing & Backing.JsonElement) != 0)
                    {
                        if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                        {
                            return default;
                        }

                        if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.ClientNameUtf8, out JsonElement result))
                        {
                            return new(result);
                        }
                    }

                    if ((this.backing & Backing.Object) != 0)
                    {
                        if (this.objectBacking.TryGetValue(JsonPropertyNames.ClientName, out JsonAny result))
                        {
                            return result.As<Corvus.Json.JsonString>();
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets the <c>FileId</c> property.
            /// </summary>
            /// <remarks>
            /// <para>
            /// If the instance is valid, this property will not be <see cref="JsonValueKind.Undefined"/>.
            /// </para>
            /// <para>
            /// FileId uniquely identifies the file or directory.
            /// </para>
            /// </remarks>
            public Corvus.Json.JsonString FileId
            {
                get
                {
                    if ((this.backing & Backing.JsonElement) != 0)
                    {
                        if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                        {
                            return default;
                        }

                        if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.FileIdUtf8, out JsonElement result))
                        {
                            return new(result);
                        }
                    }

                    if ((this.backing & Backing.Object) != 0)
                    {
                        if (this.objectBacking.TryGetValue(JsonPropertyNames.FileId, out JsonAny result))
                        {
                            return result.As<Corvus.Json.JsonString>();
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets the <c>HandleId</c> property.
            /// </summary>
            /// <remarks>
            /// <para>
            /// If the instance is valid, this property will not be <see cref="JsonValueKind.Undefined"/>.
            /// </para>
            /// <para>
            /// XSMB service handle ID
            /// </para>
            /// </remarks>
            public Corvus.Json.JsonString HandleId
            {
                get
                {
                    if ((this.backing & Backing.JsonElement) != 0)
                    {
                        if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                        {
                            return default;
                        }

                        if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.HandleIdUtf8, out JsonElement result))
                        {
                            return new(result);
                        }
                    }

                    if ((this.backing & Backing.Object) != 0)
                    {
                        if (this.objectBacking.TryGetValue(JsonPropertyNames.HandleId, out JsonAny result))
                        {
                            return result.As<Corvus.Json.JsonString>();
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets the (optional) <c>LastReconnectTime</c> property.
            /// </summary>
            /// <remarks>
            /// <para>
            /// If this JSON property is <see cref="JsonValueKind.Undefined"/> then the value returned will be <see langword="null" />.
            /// </para>
            /// <para>
            /// Time handle was last connected to (UTC)
            /// </para>
            /// </remarks>
            public Corvus.Json.JsonString? LastReconnectTime
            {
                get
                {
                    if ((this.backing & Backing.JsonElement) != 0)
                    {
                        if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                        {
                            return default;
                        }

                        if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.LastReconnectTimeUtf8, out JsonElement result))
                        {
                            if (result.ValueKind == JsonValueKind.Null || result.ValueKind == JsonValueKind.Undefined)
                            {
                                return default;
                            }

                            return new(result);
                        }
                    }

                    if ((this.backing & Backing.Object) != 0)
                    {
                        if (this.objectBacking.TryGetValue(JsonPropertyNames.LastReconnectTime, out JsonAny result))
                        {
                            if (result.IsNullOrUndefined())
                            {
                                return default;
                            }

                            return result.As<Corvus.Json.JsonString>();
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets the <c>OpenTime</c> property.
            /// </summary>
            /// <remarks>
            /// <para>
            /// If the instance is valid, this property will not be <see cref="JsonValueKind.Undefined"/>.
            /// </para>
            /// <para>
            /// Time when the session that previously opened the handle has last been reconnected. (UTC)
            /// </para>
            /// </remarks>
            public Corvus.Json.JsonString OpenTime
            {
                get
                {
                    if ((this.backing & Backing.JsonElement) != 0)
                    {
                        if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                        {
                            return default;
                        }

                        if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.OpenTimeUtf8, out JsonElement result))
                        {
                            return new(result);
                        }
                    }

                    if ((this.backing & Backing.Object) != 0)
                    {
                        if (this.objectBacking.TryGetValue(JsonPropertyNames.OpenTime, out JsonAny result))
                        {
                            return result.As<Corvus.Json.JsonString>();
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets the (optional) <c>ParentId</c> property.
            /// </summary>
            /// <remarks>
            /// <para>
            /// If this JSON property is <see cref="JsonValueKind.Undefined"/> then the value returned will be <see langword="null" />.
            /// </para>
            /// <para>
            /// ParentId uniquely identifies the parent directory of the object.
            /// </para>
            /// </remarks>
            public Corvus.Json.JsonString? ParentId
            {
                get
                {
                    if ((this.backing & Backing.JsonElement) != 0)
                    {
                        if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                        {
                            return default;
                        }

                        if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.ParentIdUtf8, out JsonElement result))
                        {
                            if (result.ValueKind == JsonValueKind.Null || result.ValueKind == JsonValueKind.Undefined)
                            {
                                return default;
                            }

                            return new(result);
                        }
                    }

                    if ((this.backing & Backing.Object) != 0)
                    {
                        if (this.objectBacking.TryGetValue(JsonPropertyNames.ParentId, out JsonAny result))
                        {
                            if (result.IsNullOrUndefined())
                            {
                                return default;
                            }

                            return result.As<Corvus.Json.JsonString>();
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets the <c>Path</c> property.
            /// </summary>
            /// <remarks>
            /// <para>
            /// If the instance is valid, this property will not be <see cref="JsonValueKind.Undefined"/>.
            /// </para>
            /// </remarks>
            public ShareNameDirectoryCompListhandles.DirectoryListHandles.ResponseBodies._200.ApplicationXml.AListedAzureStorageHandleItemArray.AListedAzureStorageHandleItem.PathEntity Path
            {
                get
                {
                    if ((this.backing & Backing.JsonElement) != 0)
                    {
                        if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                        {
                            return default;
                        }

                        if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.PathUtf8, out JsonElement result))
                        {
                            return new(result);
                        }
                    }

                    if ((this.backing & Backing.Object) != 0)
                    {
                        if (this.objectBacking.TryGetValue(JsonPropertyNames.Path, out JsonAny result))
                        {
                            return result.As<ShareNameDirectoryCompListhandles.DirectoryListHandles.ResponseBodies._200.ApplicationXml.AListedAzureStorageHandleItemArray.AListedAzureStorageHandleItem.PathEntity>();
                        }
                    }

                    return default;
                }
            }

            /// <summary>
            /// Gets the <c>SessionId</c> property.
            /// </summary>
            /// <remarks>
            /// <para>
            /// If the instance is valid, this property will not be <see cref="JsonValueKind.Undefined"/>.
            /// </para>
            /// <para>
            /// SMB session ID in context of which the file handle was opened
            /// </para>
            /// </remarks>
            public Corvus.Json.JsonString SessionId
            {
                get
                {
                    if ((this.backing & Backing.JsonElement) != 0)
                    {
                        if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                        {
                            return default;
                        }

                        if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.SessionIdUtf8, out JsonElement result))
                        {
                            return new(result);
                        }
                    }

                    if ((this.backing & Backing.Object) != 0)
                    {
                        if (this.objectBacking.TryGetValue(JsonPropertyNames.SessionId, out JsonAny result))
                        {
                            return result.As<Corvus.Json.JsonString>();
                        }
                    }

                    return default;
                }
            }

            /// <inheritdoc/>
            public static AListedAzureStorageHandleItem FromProperties(IDictionary<JsonPropertyName, JsonAny> source)
            {
                return new(source.Select(kvp => new JsonObjectProperty(kvp.Key, kvp.Value)).ToImmutableList());
            }

            /// <inheritdoc/>
            public static AListedAzureStorageHandleItem FromProperties(params (JsonPropertyName Name, JsonAny Value)[] source)
            {
                return new(source.Select(s => new JsonObjectProperty(s.Name, s.Value.AsAny)).ToImmutableList());
            }

            /// <summary>
            /// Creates an instance of the type from the given immutable list of properties.
            /// </summary>
            /// <param name="source">The list of properties.</param>
            /// <returns>An instance of the type initialized from the list of properties.</returns>
            public static AListedAzureStorageHandleItem FromProperties(ImmutableList<JsonObjectProperty> source)
            {
                return new(source);
            }

            /// <summary>
            /// Creates an instance of a <see cref="AListedAzureStorageHandleItem"/>.
            /// </summary>
            public static AListedAzureStorageHandleItem Create(
                in Corvus.Json.JsonString clientIp,
                in Corvus.Json.JsonString clientName,
                in Corvus.Json.JsonString fileId,
                in Corvus.Json.JsonString handleId,
                in Corvus.Json.JsonString openTime,
                in ShareNameDirectoryCompListhandles.DirectoryListHandles.ResponseBodies._200.ApplicationXml.AListedAzureStorageHandleItemArray.AListedAzureStorageHandleItem.PathEntity path,
                in Corvus.Json.JsonString sessionId,
                in ShareNameDirectoryCompListhandles.DirectoryListHandles.ResponseBodies._200.ApplicationXml.AListedAzureStorageHandleItemArray.AListedAzureStorageHandleItem.AccessRightsOfTheAccessPolicyArray? accessRightList = null,
                in Corvus.Json.JsonString? lastReconnectTime = null,
                in Corvus.Json.JsonString? parentId = null)
            {
                var builder = ImmutableList.CreateBuilder<JsonObjectProperty>();
                builder.Add(JsonPropertyNames.ClientIp, clientIp.AsAny);
                builder.Add(JsonPropertyNames.ClientName, clientName.AsAny);
                builder.Add(JsonPropertyNames.FileId, fileId.AsAny);
                builder.Add(JsonPropertyNames.HandleId, handleId.AsAny);
                builder.Add(JsonPropertyNames.OpenTime, openTime.AsAny);
                builder.Add(JsonPropertyNames.Path, path.AsAny);
                builder.Add(JsonPropertyNames.SessionId, sessionId.AsAny);

                if (accessRightList is not null)
                {
                    builder.Add(JsonPropertyNames.AccessRightList, accessRightList.Value.AsAny);
                }

                if (lastReconnectTime is not null)
                {
                    builder.Add(JsonPropertyNames.LastReconnectTime, lastReconnectTime.Value.AsAny);
                }

                if (parentId is not null)
                {
                    builder.Add(JsonPropertyNames.ParentId, parentId.Value.AsAny);
                }

                return new(builder.ToImmutable());
            }

            /// <inheritdoc/>
            public ImmutableList<JsonObjectProperty> AsPropertyBacking()
            {
                return __CorvusObjectHelpers.GetPropertyBacking(this);
            }
            /// <inheritdoc/>
            public ImmutableList<JsonObjectProperty>.Builder AsPropertyBackingBuilder()
            {
                return __CorvusObjectHelpers.GetPropertyBacking(this).ToBuilder();
            }

            /// <inheritdoc/>
            public JsonObjectEnumerator EnumerateObject()
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    return new(this.jsonElementBacking);
                }

                if ((this.backing & Backing.Object) != 0)
                {
                    return new(this.objectBacking);
                }

                throw new InvalidOperationException();
            }

            /// <inheritdoc/>
            public bool HasProperties()
            {
                if ((this.backing & Backing.Object) != 0)
                {
                    return this.objectBacking.Count > 0;
                }

                if ((this.backing & Backing.JsonElement) != 0)
                {
                    using JsonElement.ObjectEnumerator enumerator = this.jsonElementBacking.EnumerateObject();
                    return enumerator.MoveNext();
                }

                throw new InvalidOperationException();
            }

            /// <inheritdoc />
            public bool HasProperty(in JsonPropertyName name)
            {
                if ((this.backing & Backing.Object) != 0)
                {
                    return this.objectBacking.ContainsKey(name);
                }

                if ((this.backing & Backing.JsonElement) != 0)
                {
                    return name.TryGetProperty(this.jsonElementBacking, out JsonElement _);
                }

                throw new InvalidOperationException();
            }

            /// <inheritdoc />
            public bool HasProperty(string name)
            {
                if ((this.backing & Backing.Object) != 0)
                {
                    return this.objectBacking.ContainsKey(name);
                }

                if ((this.backing & Backing.JsonElement) != 0)
                {
                    return this.jsonElementBacking.TryGetProperty(name, out _);
                }

                throw new InvalidOperationException();
            }

            /// <inheritdoc />
            public bool HasProperty(ReadOnlySpan<char> name)
            {
                if ((this.backing & Backing.Object) != 0)
                {
                    return this.objectBacking.ContainsKey(name);
                }

                if ((this.backing & Backing.JsonElement) != 0)
                {
                    return this.jsonElementBacking.TryGetProperty(name, out _);
                }

                throw new InvalidOperationException();
            }

            /// <inheritdoc />
            public bool HasProperty(ReadOnlySpan<byte> name)
            {
                if ((this.backing & Backing.Object) != 0)
                {
                    return this.objectBacking.ContainsKey(name);
                }

                if ((this.backing & Backing.JsonElement) != 0)
                {
                    return this.jsonElementBacking.TryGetProperty(name, out _);
                }

                throw new InvalidOperationException();
            }

            /// <summary>
            /// Sets the (optional) <c>AccessRightList</c> property.
            /// </summary>
            /// <param name="value">The new property value</param>
            /// <returns>The instance with the property set.</returns>
            public AListedAzureStorageHandleItem WithAccessRightList(in ShareNameDirectoryCompListhandles.DirectoryListHandles.ResponseBodies._200.ApplicationXml.AListedAzureStorageHandleItemArray.AListedAzureStorageHandleItem.AccessRightsOfTheAccessPolicyArray? value)
            {
                return value.HasValue ? this.SetProperty(JsonPropertyNames.AccessRightList, value.Value) : this.RemoveProperty(JsonPropertyNames.AccessRightList);
            }

            /// <summary>
            /// Sets the <c>ClientIp</c> property.
            /// </summary>
            /// <param name="value">The new property value</param>
            /// <returns>The instance with the property set.</returns>
            /// <remarks>
            /// <para>
            /// Client IP that opened the handle
            /// </para>
            /// </remarks>
            public AListedAzureStorageHandleItem WithClientIp(in Corvus.Json.JsonString value)
            {
                return this.SetProperty(JsonPropertyNames.ClientIp, value);
            }

            /// <summary>
            /// Sets the <c>ClientName</c> property.
            /// </summary>
            /// <param name="value">The new property value</param>
            /// <returns>The instance with the property set.</returns>
            /// <remarks>
            /// <para>
            /// Name of the client machine where the share is being mounted
            /// </para>
            /// </remarks>
            public AListedAzureStorageHandleItem WithClientName(in Corvus.Json.JsonString value)
            {
                return this.SetProperty(JsonPropertyNames.ClientName, value);
            }

            /// <summary>
            /// Sets the <c>FileId</c> property.
            /// </summary>
            /// <param name="value">The new property value</param>
            /// <returns>The instance with the property set.</returns>
            /// <remarks>
            /// <para>
            /// FileId uniquely identifies the file or directory.
            /// </para>
            /// </remarks>
            public AListedAzureStorageHandleItem WithFileId(in Corvus.Json.JsonString value)
            {
                return this.SetProperty(JsonPropertyNames.FileId, value);
            }

            /// <summary>
            /// Sets the <c>HandleId</c> property.
            /// </summary>
            /// <param name="value">The new property value</param>
            /// <returns>The instance with the property set.</returns>
            /// <remarks>
            /// <para>
            /// XSMB service handle ID
            /// </para>
            /// </remarks>
            public AListedAzureStorageHandleItem WithHandleId(in Corvus.Json.JsonString value)
            {
                return this.SetProperty(JsonPropertyNames.HandleId, value);
            }

            /// <summary>
            /// Sets the (optional) <c>LastReconnectTime</c> property.
            /// </summary>
            /// <param name="value">The new property value</param>
            /// <returns>The instance with the property set.</returns>
            /// <remarks>
            /// <para>
            /// Time handle was last connected to (UTC)
            /// </para>
            /// </remarks>
            public AListedAzureStorageHandleItem WithLastReconnectTime(in Corvus.Json.JsonString? value)
            {
                return value.HasValue ? this.SetProperty(JsonPropertyNames.LastReconnectTime, value.Value) : this.RemoveProperty(JsonPropertyNames.LastReconnectTime);
            }

            /// <summary>
            /// Sets the <c>OpenTime</c> property.
            /// </summary>
            /// <param name="value">The new property value</param>
            /// <returns>The instance with the property set.</returns>
            /// <remarks>
            /// <para>
            /// Time when the session that previously opened the handle has last been reconnected. (UTC)
            /// </para>
            /// </remarks>
            public AListedAzureStorageHandleItem WithOpenTime(in Corvus.Json.JsonString value)
            {
                return this.SetProperty(JsonPropertyNames.OpenTime, value);
            }

            /// <summary>
            /// Sets the (optional) <c>ParentId</c> property.
            /// </summary>
            /// <param name="value">The new property value</param>
            /// <returns>The instance with the property set.</returns>
            /// <remarks>
            /// <para>
            /// ParentId uniquely identifies the parent directory of the object.
            /// </para>
            /// </remarks>
            public AListedAzureStorageHandleItem WithParentId(in Corvus.Json.JsonString? value)
            {
                return value.HasValue ? this.SetProperty(JsonPropertyNames.ParentId, value.Value) : this.RemoveProperty(JsonPropertyNames.ParentId);
            }

            /// <summary>
            /// Sets the <c>Path</c> property.
            /// </summary>
            /// <param name="value">The new property value</param>
            /// <returns>The instance with the property set.</returns>
            public AListedAzureStorageHandleItem WithPath(in ShareNameDirectoryCompListhandles.DirectoryListHandles.ResponseBodies._200.ApplicationXml.AListedAzureStorageHandleItemArray.AListedAzureStorageHandleItem.PathEntity value)
            {
                return this.SetProperty(JsonPropertyNames.Path, value);
            }

            /// <summary>
            /// Sets the <c>SessionId</c> property.
            /// </summary>
            /// <param name="value">The new property value</param>
            /// <returns>The instance with the property set.</returns>
            /// <remarks>
            /// <para>
            /// SMB session ID in context of which the file handle was opened
            /// </para>
            /// </remarks>
            public AListedAzureStorageHandleItem WithSessionId(in Corvus.Json.JsonString value)
            {
                return this.SetProperty(JsonPropertyNames.SessionId, value);
            }

            /// <summary>
            /// Get a property.
            /// </summary>
            /// <param name="name">The name of the property.</param>
            /// <param name="value">The value of the property.</param>
            /// <returns><c>True</c> if the property was present.</returns>
            /// <exception cref="InvalidOperationException">The value is not an object.</exception>
            public bool TryGetProperty(in JsonPropertyName name, out JsonAny value)
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                    {
                        value = default;
                        return false;
                    }

                    if (name.TryGetProperty(this.jsonElementBacking, out JsonElement element))
                    {
                        value = new(element);
                        return true;
                    }

                    value = default;
                    return false;
                }

                if ((this.backing & Backing.Object) != 0)
                {
                    if (this.objectBacking.TryGetValue(name, out JsonAny result))
                    {
                        value = result;
                        return true;
                    }

                    value = default;
                    return false;
                }

                throw new InvalidOperationException();
            }

            /// <summary>
            /// Get a property.
            /// </summary>
            /// <param name="name">The name of the property.</param>
            /// <param name="value">The value of the property.</param>
            /// <returns><c>True</c> if the property was present.</returns>
            /// <exception cref="InvalidOperationException">The value is not an object.</exception>
            public bool TryGetProperty(string name, out JsonAny value)
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                    {
                        value = default;
                        return false;
                    }

                    if (this.jsonElementBacking.TryGetProperty(name, out JsonElement element))
                    {
                        value = new(element);
                        return true;
                    }

                    value = default;
                    return false;
                }

                if ((this.backing & Backing.Object) != 0)
                {
                    if (this.objectBacking.TryGetValue(name, out JsonAny result))
                    {
                        value = result;
                        return true;
                    }

                    value = default;
                    return false;
                }

                throw new InvalidOperationException();
            }

            /// <summary>
            /// Get a property.
            /// </summary>
            /// <param name="name">The name of the property.</param>
            /// <param name="value">The value of the property.</param>
            /// <returns><c>True</c> if the property was present.</returns>
            /// <exception cref="InvalidOperationException">The value is not an object.</exception>
            public bool TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                    {
                        value = default;
                        return false;
                    }

                    if (this.jsonElementBacking.TryGetProperty(name, out JsonElement element))
                    {
                        value = new(element);
                        return true;
                    }

                    value = default;
                    return false;
                }

                if ((this.backing & Backing.Object) != 0)
                {
                    if (this.objectBacking.TryGetValue(name, out JsonAny result))
                    {
                        value = result;
                        return true;
                    }

                    value = default;
                    return false;
                }

                throw new InvalidOperationException();
            }

            /// <summary>
            /// Get a property.
            /// </summary>
            /// <param name="name">The name of the property.</param>
            /// <param name="value">The value of the property.</param>
            /// <returns><c>True</c> if the property was present.</returns>
            /// <exception cref="InvalidOperationException">The value is not an object.</exception>
            public bool TryGetProperty(ReadOnlySpan<byte> name, out JsonAny value)
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                    {
                        value = default;
                        return false;
                    }

                    if (this.jsonElementBacking.TryGetProperty(name, out JsonElement element))
                    {
                        value = new(element);
                        return true;
                    }

                    value = default;
                    return false;
                }

                if ((this.backing & Backing.Object) != 0)
                {
                    if (this.objectBacking.TryGetValue(name, out JsonAny result))
                    {
                        value = result;
                        return true;
                    }

                    value = default;
                    return false;
                }

                throw new InvalidOperationException();
            }

            /// <inheritdoc />
            public bool TryGetProperty<TValue>(in JsonPropertyName name, out TValue value)
                where TValue : struct, IJsonValue<TValue>
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                    {
                        value = default;
                        return false;
                    }

                    if (name.TryGetProperty(this.jsonElementBacking, out JsonElement element))
                    {
#if NET8_0_OR_GREATER
                        value = TValue.FromJson(element);
#else
                        value = JsonValueNetStandard20Extensions.FromJsonElement<TValue>(element);
#endif

                        return true;
                    }

                    value = default;
                    return false;
                }

                if ((this.backing & Backing.Object) != 0)
                {
                    if (this.objectBacking.TryGetValue(name, out JsonAny result))
                    {
#if NET8_0_OR_GREATER
                        value = TValue.FromAny(result);
#else
                        value = result.As<TValue>();
#endif
                        return true;
                    }

                    value = default;
                    return false;
                }

                throw new InvalidOperationException();
            }

            /// <inheritdoc />
            public bool TryGetProperty<TValue>(string name, out TValue value)
                where TValue : struct, IJsonValue<TValue>
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                    {
                        value = default;
                        return false;
                    }

                    if (this.jsonElementBacking.TryGetProperty(name, out JsonElement element))
                    {
#if NET8_0_OR_GREATER
                        value = TValue.FromJson(element);
#else
                        value = JsonValueNetStandard20Extensions.FromJsonElement<TValue>(element);
#endif

                        return true;
                    }

                    value = default;
                    return false;
                }

                if ((this.backing & Backing.Object) != 0)
                {
                    if (this.objectBacking.TryGetValue(name, out JsonAny result))
                    {
#if NET8_0_OR_GREATER
                        value = TValue.FromAny(result);
#else
                        value = result.As<TValue>();
#endif
                        return true;
                    }

                    value = default;
                    return false;
                }

                throw new InvalidOperationException();
            }

            /// <inheritdoc />
            public bool TryGetProperty<TValue>(ReadOnlySpan<char> name, out TValue value)
                where TValue : struct, IJsonValue<TValue>
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                    {
                        value = default;
                        return false;
                    }

                    if (this.jsonElementBacking.TryGetProperty(name, out JsonElement element))
                    {
#if NET8_0_OR_GREATER
                        value = TValue.FromJson(element);
#else
                        value = JsonValueNetStandard20Extensions.FromJsonElement<TValue>(element);
#endif

                        return true;
                    }

                    value = default;
                    return false;
                }

                if ((this.backing & Backing.Object) != 0)
                {
                    if (this.objectBacking.TryGetValue(name, out JsonAny result))
                    {
#if NET8_0_OR_GREATER
                        value = TValue.FromAny(result);
#else
                        value = result.As<TValue>();
#endif
                        return true;
                    }

                    value = default;
                    return false;
                }

                throw new InvalidOperationException();
            }

            /// <inheritdoc />
            public bool TryGetProperty<TValue>(ReadOnlySpan<byte> name, out TValue value)
                where TValue : struct, IJsonValue<TValue>
            {
                if ((this.backing & Backing.JsonElement) != 0)
                {
                    if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                    {
                        value = default;
                        return false;
                    }

                    if (this.jsonElementBacking.TryGetProperty(name, out JsonElement element))
                    {
#if NET8_0_OR_GREATER
                        value = TValue.FromJson(element);
#else
                        value = JsonValueNetStandard20Extensions.FromJsonElement<TValue>(element);
#endif

                        return true;
                    }

                    value = default;
                    return false;
                }

                if ((this.backing & Backing.Object) != 0)
                {
                    if (this.objectBacking.TryGetValue(name, out JsonAny result))
                    {
#if NET8_0_OR_GREATER
                        value = TValue.FromAny(result);
#else
                        value = result.As<TValue>();
#endif
                        return true;
                    }

                    value = default;
                    return false;
                }

                throw new InvalidOperationException();
            }

            /// <inheritdoc />
            public AListedAzureStorageHandleItem SetProperty<TValue>(in JsonPropertyName name, TValue value)
                where TValue : struct, IJsonValue
            {
                return new(__CorvusObjectHelpers.GetPropertyBackingWith(this, name, value.AsAny));
            }

            /// <inheritdoc />
            public AListedAzureStorageHandleItem RemoveProperty(in JsonPropertyName name)
            {
                return new(__CorvusObjectHelpers.GetPropertyBackingWithout(this, name));
            }

            /// <inheritdoc />
            public AListedAzureStorageHandleItem RemoveProperty(string name)
            {
                return new(__CorvusObjectHelpers.GetPropertyBackingWithout(this, name));
            }

            /// <inheritdoc />
            public AListedAzureStorageHandleItem RemoveProperty(ReadOnlySpan<char> name)
            {
                return new(__CorvusObjectHelpers.GetPropertyBackingWithout(this, name));
            }

            /// <inheritdoc />
            public AListedAzureStorageHandleItem RemoveProperty(ReadOnlySpan<byte> name)
            {
                return new(__CorvusObjectHelpers.GetPropertyBackingWithout(this, name));
            }

            /// <summary>
            /// Provides UTF8 and string versions of the JSON property names on the object.
            /// </summary>
            public static class JsonPropertyNames
            {
                /// <summary>
                /// Gets the JSON property name for <see cref="AccessRightList"/>.
                /// </summary>
                public const string AccessRightList = "AccessRightList";

                /// <summary>
                /// Gets the JSON property name for <see cref="ClientIp"/>.
                /// </summary>
                public const string ClientIp = "ClientIp";

                /// <summary>
                /// Gets the JSON property name for <see cref="ClientName"/>.
                /// </summary>
                public const string ClientName = "ClientName";

                /// <summary>
                /// Gets the JSON property name for <see cref="FileId"/>.
                /// </summary>
                public const string FileId = "FileId";

                /// <summary>
                /// Gets the JSON property name for <see cref="HandleId"/>.
                /// </summary>
                public const string HandleId = "HandleId";

                /// <summary>
                /// Gets the JSON property name for <see cref="LastReconnectTime"/>.
                /// </summary>
                public const string LastReconnectTime = "LastReconnectTime";

                /// <summary>
                /// Gets the JSON property name for <see cref="OpenTime"/>.
                /// </summary>
                public const string OpenTime = "OpenTime";

                /// <summary>
                /// Gets the JSON property name for <see cref="ParentId"/>.
                /// </summary>
                public const string ParentId = "ParentId";

                /// <summary>
                /// Gets the JSON property name for <see cref="Path"/>.
                /// </summary>
                public const string Path = "Path";

                /// <summary>
                /// Gets the JSON property name for <see cref="SessionId"/>.
                /// </summary>
                public const string SessionId = "SessionId";

                /// <summary>
                /// Gets the JSON property name for <see cref="AccessRightList"/>.
                /// </summary>
                public static ReadOnlySpan<byte> AccessRightListUtf8 => "AccessRightList"u8;

                /// <summary>
                /// Gets the JSON property name for <see cref="ClientIp"/>.
                /// </summary>
                public static ReadOnlySpan<byte> ClientIpUtf8 => "ClientIp"u8;

                /// <summary>
                /// Gets the JSON property name for <see cref="ClientName"/>.
                /// </summary>
                public static ReadOnlySpan<byte> ClientNameUtf8 => "ClientName"u8;

                /// <summary>
                /// Gets the JSON property name for <see cref="FileId"/>.
                /// </summary>
                public static ReadOnlySpan<byte> FileIdUtf8 => "FileId"u8;

                /// <summary>
                /// Gets the JSON property name for <see cref="HandleId"/>.
                /// </summary>
                public static ReadOnlySpan<byte> HandleIdUtf8 => "HandleId"u8;

                /// <summary>
                /// Gets the JSON property name for <see cref="LastReconnectTime"/>.
                /// </summary>
                public static ReadOnlySpan<byte> LastReconnectTimeUtf8 => "LastReconnectTime"u8;

                /// <summary>
                /// Gets the JSON property name for <see cref="OpenTime"/>.
                /// </summary>
                public static ReadOnlySpan<byte> OpenTimeUtf8 => "OpenTime"u8;

                /// <summary>
                /// Gets the JSON property name for <see cref="ParentId"/>.
                /// </summary>
                public static ReadOnlySpan<byte> ParentIdUtf8 => "ParentId"u8;

                /// <summary>
                /// Gets the JSON property name for <see cref="Path"/>.
                /// </summary>
                public static ReadOnlySpan<byte> PathUtf8 => "Path"u8;

                /// <summary>
                /// Gets the JSON property name for <see cref="SessionId"/>.
                /// </summary>
                public static ReadOnlySpan<byte> SessionIdUtf8 => "SessionId"u8;
            }

            private static class __CorvusObjectHelpers
            {
                /// <summary>
                /// Builds an <see cref="ImmutableList{JsonObjectProperty}"/> from the object.
                /// </summary>
                /// <returns>An immutable list of <see cref="JsonAny"/> built from the object.</returns>
                /// <exception cref="InvalidOperationException">The value is not an object.</exception>
                public static ImmutableList<JsonObjectProperty> GetPropertyBacking(in AListedAzureStorageHandleItem that)
                {
                    if ((that.backing & Backing.Object) != 0)
                    {
                        return that.objectBacking;
                    }

                    if ((that.backing & Backing.JsonElement) != 0)
                    {
                        return PropertyBackingBuilders.GetPropertyBackingBuilder(that.jsonElementBacking).ToImmutable();
                    }

                    throw new InvalidOperationException();
                }

                /// <summary>
                /// Builds an <see cref="ImmutableList{JsonObjectProperty}"/> from the object, without a specific property.
                /// </summary>
                /// <returns>An immutable list of <see cref="JsonObjectProperty"/>, built from the existing object, without the given property.</returns>
                /// <exception cref="InvalidOperationException">The value is not an object.</exception>
                public static ImmutableList<JsonObjectProperty> GetPropertyBackingWithout(in AListedAzureStorageHandleItem that, in JsonPropertyName name)
                {
                    if ((that.backing & Backing.Object) != 0)
                    {
                        return that.objectBacking.Remove(name);
                    }

                    if ((that.backing & Backing.JsonElement) != 0)
                    {
                        return PropertyBackingBuilders.GetPropertyBackingBuilderWithout(that.jsonElementBacking, name).ToImmutable();
                    }

                    throw new InvalidOperationException();
                }

                /// <summary>
                /// Builds an <see cref="ImmutableList{JsonObjectProperty}"/> from the object, without a specific property.
                /// </summary>
                /// <returns>An immutable list of <see cref="JsonObjectProperty"/>, built from the existing object, without the given property.</returns>
                /// <exception cref="InvalidOperationException">The value is not an object.</exception>
                public static ImmutableList<JsonObjectProperty> GetPropertyBackingWithout(in AListedAzureStorageHandleItem that, ReadOnlySpan<char> name)
                {
                    if ((that.backing & Backing.Object) != 0)
                    {
                        return that.objectBacking.Remove(name);
                    }

                    if ((that.backing & Backing.JsonElement) != 0)
                    {
                        return PropertyBackingBuilders.GetPropertyBackingBuilderWithout(that.jsonElementBacking, name).ToImmutable();
                    }

                    throw new InvalidOperationException();
                }

                /// <summary>
                /// Builds an <see cref="ImmutableList{JsonObjectProperty}"/> from the object, without a specific property.
                /// </summary>
                /// <returns>An immutable list of <see cref="JsonObjectProperty"/>, built from the existing object, without the given property.</returns>
                /// <exception cref="InvalidOperationException">The value is not an object.</exception>
                public static ImmutableList<JsonObjectProperty> GetPropertyBackingWithout(in AListedAzureStorageHandleItem that, ReadOnlySpan<byte> name)
                {
                    if ((that.backing & Backing.Object) != 0)
                    {
                        return that.objectBacking.Remove(name);
                    }

                    if ((that.backing & Backing.JsonElement) != 0)
                    {
                        return PropertyBackingBuilders.GetPropertyBackingBuilderWithout(that.jsonElementBacking, name).ToImmutable();
                    }

                    throw new InvalidOperationException();
                }

                /// <summary>
                /// Builds an <see cref="ImmutableList{JsonObjectProperty}"/> from the object, without a specific property.
                /// </summary>
                /// <returns>An immutable list of <see cref="JsonObjectProperty"/>, built from the existing object, without the given property.</returns>
                /// <exception cref="InvalidOperationException">The value is not an object.</exception>
                public static ImmutableList<JsonObjectProperty> GetPropertyBackingWithout(in AListedAzureStorageHandleItem that, string name)
                {
                    if ((that.backing & Backing.Object) != 0)
                    {
                        return that.objectBacking.Remove(name);
                    }

                    if ((that.backing & Backing.JsonElement) != 0)
                    {
                        return PropertyBackingBuilders.GetPropertyBackingBuilderWithout(that.jsonElementBacking, name).ToImmutable();
                    }

                    throw new InvalidOperationException();
                }

                /// <summary>
                /// Builds an <see cref="ImmutableList{JsonObjectProperty}"/> from the object, without a specific property.
                /// </summary>
                /// <returns>An immutable list of <see cref="JsonObjectProperty"/>, built from the existing object, with the given property.</returns>
                /// <exception cref="InvalidOperationException">The value is not an object.</exception>
                public static ImmutableList<JsonObjectProperty> GetPropertyBackingWith(in AListedAzureStorageHandleItem that, in JsonPropertyName name, in JsonAny value)
                {
                    if ((that.backing & Backing.Object) != 0)
                    {
                        return that.objectBacking.SetItem(name, value);
                    }

                    if ((that.backing & Backing.JsonElement) != 0)
                    {
                        return PropertyBackingBuilders.GetPropertyBackingBuilderReplacing(that.jsonElementBacking, name, value).ToImmutable();
                    }

                    throw new InvalidOperationException();
                }
            }
        }
    }
}
