//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;

namespace SharenameDirectoryRestypeDirectoryCompList.DirectoryListfilesanddirectoriessegment;

/// <summary>
/// Generated from JSON Schema.
/// </summary>
public readonly partial struct IncludeQuery
{
    /// <summary>
    /// Generated from JSON Schema.
    /// </summary>
    public readonly partial struct ItemsEntity
    {
        /// <inheritdoc/>
        public ValidationContext Validate(in ValidationContext validationContext, ValidationLevel level = ValidationLevel.Flag)
        {
            ValidationContext result = validationContext;
            if (level > ValidationLevel.Flag && !result.IsUsingResults)
            {
                result = result.UsingResults();
            }

            if (level > ValidationLevel.Basic)
            {
                if (!result.IsUsingStack)
                {
                    result = result.UsingStack();
                }

                result = result.PushSchemaLocation("#/items");
            }

            JsonValueKind valueKind = this.ValueKind;

            result = CorvusValidation.TypeValidationHandler(valueKind, result, level);

            if (level == ValidationLevel.Flag && !result.IsValid)
            {
                return result;
            }

            result = CorvusValidation.CompositionAnyOfValidationHandler(this, result, level);

            if (level == ValidationLevel.Flag && !result.IsValid)
            {
                return result;
            }

            if (level > ValidationLevel.Basic)
            {
                result = result.PopLocation();
            }

            return result;
        }

        /// <summary>
        /// Constant values for the enum keyword.
        /// </summary>
        public static class EnumValues
        {
            /// <summary>
            /// Gets the string 'Timestamps'
            /// as a <see cref="SharenameDirectoryRestypeDirectoryCompList.DirectoryListfilesanddirectoriessegment.IncludeQuery.ItemsEntity"/>.
            /// </summary>
            public static ItemsEntity Timestamps { get; } = CorvusValidation.Enum1.As<ItemsEntity>();

            /// <summary>
            /// Gets the string 'Timestamps'
            /// as a UTF8 byte array.
            /// </summary>
            public static ReadOnlySpan<byte> TimestampsUtf8 => CorvusValidation.Enum1Utf8;

            /// <summary>
            /// Gets the string 'Etag'
            /// as a <see cref="SharenameDirectoryRestypeDirectoryCompList.DirectoryListfilesanddirectoriessegment.IncludeQuery.ItemsEntity"/>.
            /// </summary>
            public static ItemsEntity Etag { get; } = CorvusValidation.Enum2.As<ItemsEntity>();

            /// <summary>
            /// Gets the string 'Etag'
            /// as a UTF8 byte array.
            /// </summary>
            public static ReadOnlySpan<byte> EtagUtf8 => CorvusValidation.Enum2Utf8;

            /// <summary>
            /// Gets the string 'Attributes'
            /// as a <see cref="SharenameDirectoryRestypeDirectoryCompList.DirectoryListfilesanddirectoriessegment.IncludeQuery.ItemsEntity"/>.
            /// </summary>
            public static ItemsEntity Attributes { get; } = CorvusValidation.Enum3.As<ItemsEntity>();

            /// <summary>
            /// Gets the string 'Attributes'
            /// as a UTF8 byte array.
            /// </summary>
            public static ReadOnlySpan<byte> AttributesUtf8 => CorvusValidation.Enum3Utf8;

            /// <summary>
            /// Gets the string 'PermissionKey'
            /// as a <see cref="SharenameDirectoryRestypeDirectoryCompList.DirectoryListfilesanddirectoriessegment.IncludeQuery.ItemsEntity"/>.
            /// </summary>
            public static ItemsEntity PermissionKey { get; } = CorvusValidation.Enum4.As<ItemsEntity>();

            /// <summary>
            /// Gets the string 'PermissionKey'
            /// as a UTF8 byte array.
            /// </summary>
            public static ReadOnlySpan<byte> PermissionKeyUtf8 => CorvusValidation.Enum4Utf8;
        }

        /// <summary>
        /// Validation constants for the type.
        /// </summary>
        public static partial class CorvusValidation
        {
            /// <summary>
            /// A constant for the <c>enum</c> keyword.
            /// </summary>
            public static readonly JsonString Enum1 = JsonString.ParseValue("\"Timestamps\"");
            /// <summary>
            /// A constant for the <c>enum</c> keyword.
            /// </summary>
            public static readonly JsonString Enum2 = JsonString.ParseValue("\"Etag\"");
            /// <summary>
            /// A constant for the <c>enum</c> keyword.
            /// </summary>
            public static readonly JsonString Enum3 = JsonString.ParseValue("\"Attributes\"");
            /// <summary>
            /// A constant for the <c>enum</c> keyword.
            /// </summary>
            public static readonly JsonString Enum4 = JsonString.ParseValue("\"PermissionKey\"");

            /// <summary>
            /// A constant for the <c>enum</c> keyword.
            /// </summary>
            public static ReadOnlySpan<byte> Enum1Utf8 => "\"Timestamps\""u8;
            /// <summary>
            /// A constant for the <c>enum</c> keyword.
            /// </summary>
            public static ReadOnlySpan<byte> Enum2Utf8 => "\"Etag\""u8;
            /// <summary>
            /// A constant for the <c>enum</c> keyword.
            /// </summary>
            public static ReadOnlySpan<byte> Enum3Utf8 => "\"Attributes\""u8;
            /// <summary>
            /// A constant for the <c>enum</c> keyword.
            /// </summary>
            public static ReadOnlySpan<byte> Enum4Utf8 => "\"PermissionKey\""u8;

            /// <summary>
            /// Core type validation.
            /// </summary>
            /// <param name="valueKind">The <see cref="JsonValueKind" /> of the value to validate.</param>
            /// <param name="validationContext">The current validation context.</param>
            /// <param name="level">The current validation level.</param>
            /// <returns>The resulting validation context after validation.</returns>
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            internal static ValidationContext TypeValidationHandler(
                JsonValueKind valueKind,
                in ValidationContext validationContext,
                ValidationLevel level = ValidationLevel.Flag)
            {
                return Corvus.Json.ValidateWithoutCoreType.TypeString(valueKind, validationContext, level, "type");
            }

            /// <summary>
            /// Composition validation (any-of).
            /// </summary>
            /// <param name="value">The value to validate.</param>
            /// <param name="validationContext">The current validation context.</param>
            /// <param name="level">The current validation level.</param>
            /// <returns>The resulting validation context after validation.</returns>
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            internal static ValidationContext CompositionAnyOfValidationHandler(
                in ItemsEntity value,
                in ValidationContext validationContext,
                ValidationLevel level = ValidationLevel.Flag)
            {
                ValidationContext result = validationContext;

                result = ValidateEnum(value, result, level);
                if (!result.IsValid && level == ValidationLevel.Flag)
                {
                    return result;
                }

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                static ValidationContext ValidateEnum(in ItemsEntity value, in ValidationContext validationContext, ValidationLevel level)
                {
                    ValidationContext result = validationContext;
                    bool enumFoundValid = false;

                    enumFoundValid = value.Equals(CorvusValidation.Enum1);
                    if (!enumFoundValid)
                    {
                        enumFoundValid = value.Equals(CorvusValidation.Enum2);
                    }
                    if (!enumFoundValid)
                    {
                        enumFoundValid = value.Equals(CorvusValidation.Enum3);
                    }
                    if (!enumFoundValid)
                    {
                        enumFoundValid = value.Equals(CorvusValidation.Enum4);
                    }

                    if (enumFoundValid)
                    {
                        if (level >= ValidationLevel.Verbose)
                        {
                            result = result.WithResult(isValid: true, "Validation enum - validated against the enumeration.", "enum");
                        }
                    }
                    else
                    {
                        if (level == ValidationLevel.Flag)
                        {
                            result = result.WithResult(isValid: false);
                        }
                        else
                        {
                            result = result.WithResult(isValid: false, "Validation enum - did not validate against the enumeration.", "enum");
                        }
                    }

                    return result;
                }

                return result;
            }
        }
    }
}
