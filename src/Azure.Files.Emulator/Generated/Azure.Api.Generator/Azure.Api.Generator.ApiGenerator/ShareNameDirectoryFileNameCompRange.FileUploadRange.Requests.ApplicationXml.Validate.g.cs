//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;

namespace Azure.Files.Emulator.ShareNameDirectoryFileNameCompRange.FileUploadRange.Requests;
/// <summary>
/// Generated from JSON Schema.
/// </summary>
public readonly partial struct ApplicationXml
{
    /// <inheritdoc/>
    public ValidationContext Validate(in ValidationContext validationContext, ValidationLevel level = ValidationLevel.Flag)
    {
        ValidationContext result = validationContext;
        if (level > ValidationLevel.Flag && !result.IsUsingResults)
        {
            result = result.UsingResults();
        }

        if (level > ValidationLevel.Basic)
        {
            if (!result.IsUsingStack)
            {
                result = result.UsingStack();
            }

            result = result.PushSchemaLocation("ApplicationXml.json");
        }

        JsonValueKind valueKind = this.ValueKind;
        result = CorvusValidation.TypeValidationHandler(valueKind, result, level);
        if (level == ValidationLevel.Flag && !result.IsValid)
        {
            return result;
        }

        result = CorvusValidation.FormatValidationHandler(this, valueKind, result, level);
        if (level == ValidationLevel.Flag && !result.IsValid)
        {
            return result;
        }

        if (level > ValidationLevel.Basic)
        {
            result = result.PopLocation();
        }

        return result;
    }

    /// <summary>
    /// Validation constants for the type.
    /// </summary>
    public static partial class CorvusValidation
    {
        /// <summary>
        /// Core type validation.
        /// </summary>
        /// <param name = "valueKind">The <see cref = "JsonValueKind"/> of the value to validate.</param>
        /// <param name = "validationContext">The current validation context.</param>
        /// <param name = "level">The current validation level.</param>
        /// <returns>The resulting validation context after validation.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static ValidationContext TypeValidationHandler(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level = ValidationLevel.Flag)
        {
            return Corvus.Json.ValidateWithoutCoreType.TypeObject(valueKind, validationContext, level, "type");
        }

        /// <summary>
        /// Numeric and string format validation.
        /// </summary>
        /// <param name = "value">The value to validate.</param>
        /// <param name = "valueKind">The <see cref = "JsonValueKind"/> of the value to validate.</param>
        /// <param name = "validationContext">The current validation context.</param>
        /// <param name = "level">The current validation level.</param>
        /// <returns>The resulting validation context after validation.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static ValidationContext FormatValidationHandler(in ApplicationXml value, JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level = ValidationLevel.Flag)
        {
            if (level == ValidationLevel.Verbose)
            {
                ValidationContext unknownResult = validationContext;
                unknownResult = unknownResult.WithResult(isValid: true, "Validation format - ignored 'file' because the format is not recognized.");
                return unknownResult;
            }

            return validationContext;
        }
    }
}
