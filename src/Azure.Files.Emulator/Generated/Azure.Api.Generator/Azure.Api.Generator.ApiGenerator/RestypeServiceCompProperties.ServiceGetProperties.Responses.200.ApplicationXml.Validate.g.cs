//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;

namespace Azure.Files.Emulator.RestypeServiceCompProperties.ServiceGetProperties.Responses._200;
/// <summary>
/// Generated from JSON Schema.
/// </summary>
/// <remarks>
/// <para>
/// Storage service properties.
/// </para>
/// </remarks>
public readonly partial struct ApplicationXml
{
    /// <inheritdoc/>
    public ValidationContext Validate(in ValidationContext validationContext, ValidationLevel level = ValidationLevel.Flag)
    {
        ValidationContext result = validationContext;
        if (level > ValidationLevel.Flag && !result.IsUsingResults)
        {
            result = result.UsingResults();
        }

        if (level > ValidationLevel.Basic)
        {
            if (!result.IsUsingStack)
            {
                result = result.UsingStack();
            }

            result = result.PushSchemaLocation("ApplicationXml.json");
        }

        JsonValueKind valueKind = this.ValueKind;
        result = CorvusValidation.TypeValidationHandler(valueKind, result, level);
        if (level == ValidationLevel.Flag && !result.IsValid)
        {
            return result;
        }

        result = CorvusValidation.ObjectValidationHandler(this, valueKind, result, level);
        if (level == ValidationLevel.Flag && !result.IsValid)
        {
            return result;
        }

        if (level > ValidationLevel.Basic)
        {
            result = result.PopLocation();
        }

        return result;
    }

    /// <summary>
    /// Validation constants for the type.
    /// </summary>
    public static partial class CorvusValidation
    {
        /// <summary>
        /// Core type validation.
        /// </summary>
        /// <param name = "valueKind">The <see cref = "JsonValueKind"/> of the value to validate.</param>
        /// <param name = "validationContext">The current validation context.</param>
        /// <param name = "level">The current validation level.</param>
        /// <returns>The resulting validation context after validation.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static ValidationContext TypeValidationHandler(JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level = ValidationLevel.Flag)
        {
            return Corvus.Json.ValidateWithoutCoreType.TypeObject(valueKind, validationContext, level, "type");
        }

        /// <summary>
        /// Object validation.
        /// </summary>
        /// <param name = "value">The value to validate.</param>
        /// <param name = "valueKind">The <see cref = "JsonValueKind"/> of the value to validate.</param>
        /// <param name = "validationContext">The current validation context.</param>
        /// <param name = "level">The current validation level.</param>
        /// <returns>The resulting validation context after validation.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static ValidationContext ObjectValidationHandler(in ApplicationXml value, JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level = ValidationLevel.Flag)
        {
            ValidationContext result = validationContext;
            if (valueKind != JsonValueKind.Object)
            {
                if (level == ValidationLevel.Verbose)
                {
                    ValidationContext ignoredResult = validationContext;
                    ignoredResult = ignoredResult.WithResult(isValid: true, "Validation properties - ignored because the value is not an object", "properties");
                    return ignoredResult;
                }

                return validationContext;
            }

            int propertyCount = 0;
            foreach (JsonObjectProperty property in value.EnumerateObject())
            {
                if (property.NameEquals(JsonPropertyNames.CorsUtf8, JsonPropertyNames.Cors))
                {
                    result = result.WithLocalProperty(propertyCount);
                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PushValidationLocationReducedPathModifierAndProperty(new("#/properties/Cors"), JsonPropertyNames.Cors);
                    }

                    ValidationContext propertyResult = property.Value.As<Azure.Files.Emulator.RestypeServiceCompProperties.ServiceGetProperties.Responses._200.ApplicationXml.CorsEntityArray>().Validate(result.CreateChildContext(), level);
                    if (level == ValidationLevel.Flag && !propertyResult.IsValid)
                    {
                        return propertyResult;
                    }

                    result = result.MergeResults(propertyResult.IsValid, level, propertyResult);
                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PopLocation();
                    }
                }
                else if (property.NameEquals(JsonPropertyNames.HourMetricsUtf8, JsonPropertyNames.HourMetrics))
                {
                    result = result.WithLocalProperty(propertyCount);
                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PushValidationLocationReducedPathModifierAndProperty(new("#/properties/HourMetrics"), JsonPropertyNames.HourMetrics);
                    }

                    ValidationContext propertyResult = property.Value.As<Azure.Files.Emulator.RestypeServiceCompProperties.ServiceGetProperties.Responses._200.ApplicationXml.StorageAnalyticsMetricsForFileService>().Validate(result.CreateChildContext(), level);
                    if (level == ValidationLevel.Flag && !propertyResult.IsValid)
                    {
                        return propertyResult;
                    }

                    result = result.MergeResults(propertyResult.IsValid, level, propertyResult);
                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PopLocation();
                    }
                }
                else if (property.NameEquals(JsonPropertyNames.MinuteMetricsUtf8, JsonPropertyNames.MinuteMetrics))
                {
                    result = result.WithLocalProperty(propertyCount);
                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PushValidationLocationReducedPathModifierAndProperty(new("#/properties/MinuteMetrics"), JsonPropertyNames.MinuteMetrics);
                    }

                    ValidationContext propertyResult = property.Value.As<Azure.Files.Emulator.RestypeServiceCompProperties.ServiceGetProperties.Responses._200.ApplicationXml.ApplicationXmlStorageAnalyticsMetricsForFileService>().Validate(result.CreateChildContext(), level);
                    if (level == ValidationLevel.Flag && !propertyResult.IsValid)
                    {
                        return propertyResult;
                    }

                    result = result.MergeResults(propertyResult.IsValid, level, propertyResult);
                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PopLocation();
                    }
                }
                else if (property.NameEquals(JsonPropertyNames.ProtocolUtf8, JsonPropertyNames.Protocol))
                {
                    result = result.WithLocalProperty(propertyCount);
                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PushValidationLocationReducedPathModifierAndProperty(new("#/properties/Protocol"), JsonPropertyNames.Protocol);
                    }

                    ValidationContext propertyResult = property.Value.As<Azure.Files.Emulator.RestypeServiceCompProperties.ServiceGetProperties.Responses._200.ApplicationXml.ProtocolSettings>().Validate(result.CreateChildContext(), level);
                    if (level == ValidationLevel.Flag && !propertyResult.IsValid)
                    {
                        return propertyResult;
                    }

                    result = result.MergeResults(propertyResult.IsValid, level, propertyResult);
                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PopLocation();
                    }
                }

                propertyCount++;
            }

            return result;
        }
    }
}
