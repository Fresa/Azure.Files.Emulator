//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System.Collections.Immutable;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace Azure.Files.Emulator.ShareNameDirectoryRestypeDirectoryCompList.DirectoryListFilesAndDirectoriesSegment.Responses._200;
/// <summary>
/// Generated from JSON Schema.
/// </summary>
/// <remarks>
/// <para>
/// An enumeration of directories and files.
/// </para>
/// </remarks>
public readonly partial struct ApplicationXml
{
    /// <summary>
    /// Generated from JSON Schema.
    /// </summary>
    /// <remarks>
    /// <para>
    /// Abstract for entries that can be listed from Directory.
    /// </para>
    /// </remarks>
    public readonly partial struct AbstractForEntriesThatCanBeListedFromDirectory
    {
        /// <summary>
        /// Generated from JSON Schema.
        /// </summary>
        public readonly partial struct AListedFileItemArray
        {
            /// <summary>
            /// Generated from JSON Schema.
            /// </summary>
            /// <remarks>
            /// <para>
            /// A listed file item.
            /// </para>
            /// </remarks>
            public readonly partial struct AListedFileItem
            {
                /// <summary>
                /// Generated from JSON Schema.
                /// </summary>
                /// <remarks>
                /// <para>
                /// File properties.
                /// </para>
                /// </remarks>
                public readonly partial struct FileProperties : IJsonObject<Azure.Files.Emulator.ShareNameDirectoryRestypeDirectoryCompList.DirectoryListFilesAndDirectoriesSegment.Responses._200.ApplicationXml.AbstractForEntriesThatCanBeListedFromDirectory.AListedFileItemArray.AListedFileItem.FileProperties>
                {
                    /// <summary>
                    /// Conversion from <see cref = "ImmutableList{JsonObjectProperty}"/>.
                    /// </summary>
                    /// <param name = "value">The value from which to convert.</param>
                    public static implicit operator FileProperties(ImmutableList<JsonObjectProperty> value)
                    {
                        return new(value);
                    }

                    /// <summary>
                    /// Conversion to <see cref = "ImmutableList{JsonObjectProperty}"/>.
                    /// </summary>
                    /// <param name = "value">The value from which to convert.</param>
                    public static implicit operator ImmutableList<JsonObjectProperty>(FileProperties value)
                    {
                        return __CorvusObjectHelpers.GetPropertyBacking(value);
                    }

                    /// <summary>
                    /// Conversion from JsonObject.
                    /// </summary>
                    /// <param name = "value">The value from which to convert.</param>
                    public static implicit operator FileProperties(JsonObject value)
                    {
                        if (value.HasDotnetBacking && value.ValueKind == JsonValueKind.Object)
                        {
                            return new(__CorvusObjectHelpers.GetPropertyBacking(value));
                        }

                        return new(value.AsJsonElement);
                    }

                    /// <summary>
                    /// Conversion to JsonObject.
                    /// </summary>
                    /// <param name = "value">The value from which to convert.</param>
                    public static implicit operator JsonObject(FileProperties value)
                    {
                        return value.AsObject;
                    }

                    /// <inheritdoc/>
                    public Corvus.Json.JsonAny this[in JsonPropertyName name]
                    {
                        get
                        {
                            if (this.TryGetProperty(name, out Corvus.Json.JsonAny result))
                            {
                                return result;
                            }

                            throw new InvalidOperationException();
                        }
                    }

                    /// <summary>
                    /// Gets the number of properties in the object.
                    /// </summary>
                    public int Count
                    {
                        get
                        {
                            if ((this.backing & Backing.JsonElement) != 0)
                            {
                                return this.jsonElementBacking.GetPropertyCount();
                            }

                            if ((this.backing & Backing.Object) != 0)
                            {
                                return this.objectBacking.Count;
                            }

                            throw new InvalidOperationException();
                        }
                    }

                    /// <summary>
                    /// Gets the (optional) <c>ChangeTime</c> property.
                    /// </summary>
                    /// <remarks>
                    /// <para>
                    /// If this JSON property is <see cref = "JsonValueKind.Undefined"/> then the value returned will be <see langword="null"/>.
                    /// </para>
                    /// </remarks>
                    public Corvus.Json.JsonDateTime? ChangeTime
                    {
                        get
                        {
                            if ((this.backing & Backing.JsonElement) != 0)
                            {
                                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                                {
                                    return default;
                                }

                                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.ChangeTimeUtf8, out JsonElement result))
                                {
                                    if (result.ValueKind == JsonValueKind.Null || result.ValueKind == JsonValueKind.Undefined)
                                    {
                                        return default;
                                    }

                                    return new(result);
                                }
                            }

                            if ((this.backing & Backing.Object) != 0)
                            {
                                if (this.objectBacking.TryGetValue(JsonPropertyNames.ChangeTime, out JsonAny result))
                                {
                                    if (result.IsNullOrUndefined())
                                    {
                                        return default;
                                    }

                                    return result.As<Corvus.Json.JsonDateTime>();
                                }
                            }

                            return default;
                        }
                    }

                    /// <summary>
                    /// Gets the <c>Content-Length</c> property.
                    /// </summary>
                    /// <remarks>
                    /// <para>
                    /// If the instance is valid, this property will not be <see cref = "JsonValueKind.Undefined"/>.
                    /// </para>
                    /// <para>
                    /// Content length of the file. This value may not be up-to-date since an SMB client may have modified the file locally. The value of Content-Length may not reflect that fact until the handle is closed or the op-lock is broken. To retrieve current property values, call Get File Properties.
                    /// </para>
                    /// </remarks>
                    public Corvus.Json.JsonInt64 ContentLength
                    {
                        get
                        {
                            if ((this.backing & Backing.JsonElement) != 0)
                            {
                                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                                {
                                    return default;
                                }

                                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.ContentLengthUtf8, out JsonElement result))
                                {
                                    return new(result);
                                }
                            }

                            if ((this.backing & Backing.Object) != 0)
                            {
                                if (this.objectBacking.TryGetValue(JsonPropertyNames.ContentLength, out JsonAny result))
                                {
                                    return result.As<Corvus.Json.JsonInt64>();
                                }
                            }

                            return default;
                        }
                    }

                    /// <summary>
                    /// Gets the (optional) <c>CreationTime</c> property.
                    /// </summary>
                    /// <remarks>
                    /// <para>
                    /// If this JSON property is <see cref = "JsonValueKind.Undefined"/> then the value returned will be <see langword="null"/>.
                    /// </para>
                    /// </remarks>
                    public Corvus.Json.JsonDateTime? CreationTime
                    {
                        get
                        {
                            if ((this.backing & Backing.JsonElement) != 0)
                            {
                                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                                {
                                    return default;
                                }

                                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.CreationTimeUtf8, out JsonElement result))
                                {
                                    if (result.ValueKind == JsonValueKind.Null || result.ValueKind == JsonValueKind.Undefined)
                                    {
                                        return default;
                                    }

                                    return new(result);
                                }
                            }

                            if ((this.backing & Backing.Object) != 0)
                            {
                                if (this.objectBacking.TryGetValue(JsonPropertyNames.CreationTime, out JsonAny result))
                                {
                                    if (result.IsNullOrUndefined())
                                    {
                                        return default;
                                    }

                                    return result.As<Corvus.Json.JsonDateTime>();
                                }
                            }

                            return default;
                        }
                    }

                    /// <summary>
                    /// Gets the (optional) <c>Etag</c> property.
                    /// </summary>
                    /// <remarks>
                    /// <para>
                    /// If this JSON property is <see cref = "JsonValueKind.Undefined"/> then the value returned will be <see langword="null"/>.
                    /// </para>
                    /// </remarks>
                    public Corvus.Json.JsonString? Etag
                    {
                        get
                        {
                            if ((this.backing & Backing.JsonElement) != 0)
                            {
                                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                                {
                                    return default;
                                }

                                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.EtagUtf8, out JsonElement result))
                                {
                                    if (result.ValueKind == JsonValueKind.Null || result.ValueKind == JsonValueKind.Undefined)
                                    {
                                        return default;
                                    }

                                    return new(result);
                                }
                            }

                            if ((this.backing & Backing.Object) != 0)
                            {
                                if (this.objectBacking.TryGetValue(JsonPropertyNames.Etag, out JsonAny result))
                                {
                                    if (result.IsNullOrUndefined())
                                    {
                                        return default;
                                    }

                                    return result.As<Corvus.Json.JsonString>();
                                }
                            }

                            return default;
                        }
                    }

                    /// <summary>
                    /// Gets the (optional) <c>Last-Modified</c> property.
                    /// </summary>
                    /// <remarks>
                    /// <para>
                    /// If this JSON property is <see cref = "JsonValueKind.Undefined"/> then the value returned will be <see langword="null"/>.
                    /// </para>
                    /// </remarks>
                    public Corvus.Json.JsonString? LastModified
                    {
                        get
                        {
                            if ((this.backing & Backing.JsonElement) != 0)
                            {
                                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                                {
                                    return default;
                                }

                                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.LastModifiedUtf8, out JsonElement result))
                                {
                                    if (result.ValueKind == JsonValueKind.Null || result.ValueKind == JsonValueKind.Undefined)
                                    {
                                        return default;
                                    }

                                    return new(result);
                                }
                            }

                            if ((this.backing & Backing.Object) != 0)
                            {
                                if (this.objectBacking.TryGetValue(JsonPropertyNames.LastModified, out JsonAny result))
                                {
                                    if (result.IsNullOrUndefined())
                                    {
                                        return default;
                                    }

                                    return result.As<Corvus.Json.JsonString>();
                                }
                            }

                            return default;
                        }
                    }

                    /// <summary>
                    /// Gets the (optional) <c>LastAccessTime</c> property.
                    /// </summary>
                    /// <remarks>
                    /// <para>
                    /// If this JSON property is <see cref = "JsonValueKind.Undefined"/> then the value returned will be <see langword="null"/>.
                    /// </para>
                    /// </remarks>
                    public Corvus.Json.JsonDateTime? LastAccessTime
                    {
                        get
                        {
                            if ((this.backing & Backing.JsonElement) != 0)
                            {
                                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                                {
                                    return default;
                                }

                                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.LastAccessTimeUtf8, out JsonElement result))
                                {
                                    if (result.ValueKind == JsonValueKind.Null || result.ValueKind == JsonValueKind.Undefined)
                                    {
                                        return default;
                                    }

                                    return new(result);
                                }
                            }

                            if ((this.backing & Backing.Object) != 0)
                            {
                                if (this.objectBacking.TryGetValue(JsonPropertyNames.LastAccessTime, out JsonAny result))
                                {
                                    if (result.IsNullOrUndefined())
                                    {
                                        return default;
                                    }

                                    return result.As<Corvus.Json.JsonDateTime>();
                                }
                            }

                            return default;
                        }
                    }

                    /// <summary>
                    /// Gets the (optional) <c>LastWriteTime</c> property.
                    /// </summary>
                    /// <remarks>
                    /// <para>
                    /// If this JSON property is <see cref = "JsonValueKind.Undefined"/> then the value returned will be <see langword="null"/>.
                    /// </para>
                    /// </remarks>
                    public Corvus.Json.JsonDateTime? LastWriteTime
                    {
                        get
                        {
                            if ((this.backing & Backing.JsonElement) != 0)
                            {
                                if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                                {
                                    return default;
                                }

                                if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.LastWriteTimeUtf8, out JsonElement result))
                                {
                                    if (result.ValueKind == JsonValueKind.Null || result.ValueKind == JsonValueKind.Undefined)
                                    {
                                        return default;
                                    }

                                    return new(result);
                                }
                            }

                            if ((this.backing & Backing.Object) != 0)
                            {
                                if (this.objectBacking.TryGetValue(JsonPropertyNames.LastWriteTime, out JsonAny result))
                                {
                                    if (result.IsNullOrUndefined())
                                    {
                                        return default;
                                    }

                                    return result.As<Corvus.Json.JsonDateTime>();
                                }
                            }

                            return default;
                        }
                    }

                    /// <inheritdoc/>
                    public static FileProperties FromProperties(IDictionary<JsonPropertyName, JsonAny> source)
                    {
                        return new(source.Select(kvp => new JsonObjectProperty(kvp.Key, kvp.Value)).ToImmutableList());
                    }

                    /// <inheritdoc/>
                    public static FileProperties FromProperties(params (JsonPropertyName Name, JsonAny Value)[] source)
                    {
                        return new(source.Select(s => new JsonObjectProperty(s.Name, s.Value.AsAny)).ToImmutableList());
                    }

                    /// <summary>
                    /// Creates an instance of the type from the given immutable list of properties.
                    /// </summary>
                    /// <param name = "source">The list of properties.</param>
                    /// <returns>An instance of the type initialized from the list of properties.</returns>
                    public static FileProperties FromProperties(ImmutableList<JsonObjectProperty> source)
                    {
                        return new(source);
                    }

                    /// <summary>
                    /// Creates an instance of a <see cref = "FileProperties"/>.
                    /// </summary>
                    public static FileProperties Create(in Corvus.Json.JsonInt64 contentLength, in Corvus.Json.JsonDateTime? changeTime = null, in Corvus.Json.JsonDateTime? creationTime = null, in Corvus.Json.JsonString? etag = null, in Corvus.Json.JsonString? lastModified = null, in Corvus.Json.JsonDateTime? lastAccessTime = null, in Corvus.Json.JsonDateTime? lastWriteTime = null)
                    {
                        var builder = ImmutableList.CreateBuilder<JsonObjectProperty>();
                        builder.Add(JsonPropertyNames.ContentLength, contentLength.AsAny);
                        if (changeTime is not null)
                        {
                            builder.Add(JsonPropertyNames.ChangeTime, changeTime.Value.AsAny);
                        }

                        if (creationTime is not null)
                        {
                            builder.Add(JsonPropertyNames.CreationTime, creationTime.Value.AsAny);
                        }

                        if (etag is not null)
                        {
                            builder.Add(JsonPropertyNames.Etag, etag.Value.AsAny);
                        }

                        if (lastModified is not null)
                        {
                            builder.Add(JsonPropertyNames.LastModified, lastModified.Value.AsAny);
                        }

                        if (lastAccessTime is not null)
                        {
                            builder.Add(JsonPropertyNames.LastAccessTime, lastAccessTime.Value.AsAny);
                        }

                        if (lastWriteTime is not null)
                        {
                            builder.Add(JsonPropertyNames.LastWriteTime, lastWriteTime.Value.AsAny);
                        }

                        return new(builder.ToImmutable());
                    }

                    /// <inheritdoc/>
                    public ImmutableList<JsonObjectProperty> AsPropertyBacking()
                    {
                        return __CorvusObjectHelpers.GetPropertyBacking(this);
                    }

                    /// <inheritdoc/>
                    public ImmutableList<JsonObjectProperty>.Builder AsPropertyBackingBuilder()
                    {
                        return __CorvusObjectHelpers.GetPropertyBacking(this).ToBuilder();
                    }

                    /// <inheritdoc/>
                    public JsonObjectEnumerator EnumerateObject()
                    {
                        if ((this.backing & Backing.JsonElement) != 0)
                        {
                            return new(this.jsonElementBacking);
                        }

                        if ((this.backing & Backing.Object) != 0)
                        {
                            return new(this.objectBacking);
                        }

                        throw new InvalidOperationException();
                    }

                    /// <inheritdoc/>
                    public bool HasProperties()
                    {
                        if ((this.backing & Backing.Object) != 0)
                        {
                            return this.objectBacking.Count > 0;
                        }

                        if ((this.backing & Backing.JsonElement) != 0)
                        {
                            using JsonElement.ObjectEnumerator enumerator = this.jsonElementBacking.EnumerateObject();
                            return enumerator.MoveNext();
                        }

                        throw new InvalidOperationException();
                    }

                    /// <inheritdoc/>
                    public bool HasProperty(in JsonPropertyName name)
                    {
                        if ((this.backing & Backing.Object) != 0)
                        {
                            return this.objectBacking.ContainsKey(name);
                        }

                        if ((this.backing & Backing.JsonElement) != 0)
                        {
                            return name.TryGetProperty(this.jsonElementBacking, out JsonElement _);
                        }

                        throw new InvalidOperationException();
                    }

                    /// <inheritdoc/>
                    public bool HasProperty(string name)
                    {
                        if ((this.backing & Backing.Object) != 0)
                        {
                            return this.objectBacking.ContainsKey(name);
                        }

                        if ((this.backing & Backing.JsonElement) != 0)
                        {
                            return this.jsonElementBacking.TryGetProperty(name, out _);
                        }

                        throw new InvalidOperationException();
                    }

                    /// <inheritdoc/>
                    public bool HasProperty(ReadOnlySpan<char> name)
                    {
                        if ((this.backing & Backing.Object) != 0)
                        {
                            return this.objectBacking.ContainsKey(name);
                        }

                        if ((this.backing & Backing.JsonElement) != 0)
                        {
                            return this.jsonElementBacking.TryGetProperty(name, out _);
                        }

                        throw new InvalidOperationException();
                    }

                    /// <inheritdoc/>
                    public bool HasProperty(ReadOnlySpan<byte> name)
                    {
                        if ((this.backing & Backing.Object) != 0)
                        {
                            return this.objectBacking.ContainsKey(name);
                        }

                        if ((this.backing & Backing.JsonElement) != 0)
                        {
                            return this.jsonElementBacking.TryGetProperty(name, out _);
                        }

                        throw new InvalidOperationException();
                    }

                    /// <summary>
                    /// Sets the (optional) <c>ChangeTime</c> property.
                    /// </summary>
                    /// <param name = "value">The new property value</param>
                    /// <returns>The instance with the property set.</returns>
                    public FileProperties WithChangeTime(in Corvus.Json.JsonDateTime? value)
                    {
                        return value.HasValue ? this.SetProperty(JsonPropertyNames.ChangeTime, value.Value) : this.RemoveProperty(JsonPropertyNames.ChangeTime);
                    }

                    /// <summary>
                    /// Sets the <c>Content-Length</c> property.
                    /// </summary>
                    /// <param name = "value">The new property value</param>
                    /// <returns>The instance with the property set.</returns>
                    /// <remarks>
                    /// <para>
                    /// Content length of the file. This value may not be up-to-date since an SMB client may have modified the file locally. The value of Content-Length may not reflect that fact until the handle is closed or the op-lock is broken. To retrieve current property values, call Get File Properties.
                    /// </para>
                    /// </remarks>
                    public FileProperties WithContentLength(in Corvus.Json.JsonInt64 value)
                    {
                        return this.SetProperty(JsonPropertyNames.ContentLength, value);
                    }

                    /// <summary>
                    /// Sets the (optional) <c>CreationTime</c> property.
                    /// </summary>
                    /// <param name = "value">The new property value</param>
                    /// <returns>The instance with the property set.</returns>
                    public FileProperties WithCreationTime(in Corvus.Json.JsonDateTime? value)
                    {
                        return value.HasValue ? this.SetProperty(JsonPropertyNames.CreationTime, value.Value) : this.RemoveProperty(JsonPropertyNames.CreationTime);
                    }

                    /// <summary>
                    /// Sets the (optional) <c>Etag</c> property.
                    /// </summary>
                    /// <param name = "value">The new property value</param>
                    /// <returns>The instance with the property set.</returns>
                    public FileProperties WithEtag(in Corvus.Json.JsonString? value)
                    {
                        return value.HasValue ? this.SetProperty(JsonPropertyNames.Etag, value.Value) : this.RemoveProperty(JsonPropertyNames.Etag);
                    }

                    /// <summary>
                    /// Sets the (optional) <c>Last-Modified</c> property.
                    /// </summary>
                    /// <param name = "value">The new property value</param>
                    /// <returns>The instance with the property set.</returns>
                    public FileProperties WithLastModified(in Corvus.Json.JsonString? value)
                    {
                        return value.HasValue ? this.SetProperty(JsonPropertyNames.LastModified, value.Value) : this.RemoveProperty(JsonPropertyNames.LastModified);
                    }

                    /// <summary>
                    /// Sets the (optional) <c>LastAccessTime</c> property.
                    /// </summary>
                    /// <param name = "value">The new property value</param>
                    /// <returns>The instance with the property set.</returns>
                    public FileProperties WithLastAccessTime(in Corvus.Json.JsonDateTime? value)
                    {
                        return value.HasValue ? this.SetProperty(JsonPropertyNames.LastAccessTime, value.Value) : this.RemoveProperty(JsonPropertyNames.LastAccessTime);
                    }

                    /// <summary>
                    /// Sets the (optional) <c>LastWriteTime</c> property.
                    /// </summary>
                    /// <param name = "value">The new property value</param>
                    /// <returns>The instance with the property set.</returns>
                    public FileProperties WithLastWriteTime(in Corvus.Json.JsonDateTime? value)
                    {
                        return value.HasValue ? this.SetProperty(JsonPropertyNames.LastWriteTime, value.Value) : this.RemoveProperty(JsonPropertyNames.LastWriteTime);
                    }

                    /// <summary>
                    /// Get a property.
                    /// </summary>
                    /// <param name = "name">The name of the property.</param>
                    /// <param name = "value">The value of the property.</param>
                    /// <returns><c>True</c> if the property was present.</returns>
                    /// <exception cref = "InvalidOperationException">The value is not an object.</exception>
                    public bool TryGetProperty(in JsonPropertyName name, out JsonAny value)
                    {
                        if ((this.backing & Backing.JsonElement) != 0)
                        {
                            if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                            {
                                value = default;
                                return false;
                            }

                            if (name.TryGetProperty(this.jsonElementBacking, out JsonElement element))
                            {
                                value = new(element);
                                return true;
                            }

                            value = default;
                            return false;
                        }

                        if ((this.backing & Backing.Object) != 0)
                        {
                            if (this.objectBacking.TryGetValue(name, out JsonAny result))
                            {
                                value = result;
                                return true;
                            }

                            value = default;
                            return false;
                        }

                        throw new InvalidOperationException();
                    }

                    /// <summary>
                    /// Get a property.
                    /// </summary>
                    /// <param name = "name">The name of the property.</param>
                    /// <param name = "value">The value of the property.</param>
                    /// <returns><c>True</c> if the property was present.</returns>
                    /// <exception cref = "InvalidOperationException">The value is not an object.</exception>
                    public bool TryGetProperty(string name, out JsonAny value)
                    {
                        if ((this.backing & Backing.JsonElement) != 0)
                        {
                            if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                            {
                                value = default;
                                return false;
                            }

                            if (this.jsonElementBacking.TryGetProperty(name, out JsonElement element))
                            {
                                value = new(element);
                                return true;
                            }

                            value = default;
                            return false;
                        }

                        if ((this.backing & Backing.Object) != 0)
                        {
                            if (this.objectBacking.TryGetValue(name, out JsonAny result))
                            {
                                value = result;
                                return true;
                            }

                            value = default;
                            return false;
                        }

                        throw new InvalidOperationException();
                    }

                    /// <summary>
                    /// Get a property.
                    /// </summary>
                    /// <param name = "name">The name of the property.</param>
                    /// <param name = "value">The value of the property.</param>
                    /// <returns><c>True</c> if the property was present.</returns>
                    /// <exception cref = "InvalidOperationException">The value is not an object.</exception>
                    public bool TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)
                    {
                        if ((this.backing & Backing.JsonElement) != 0)
                        {
                            if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                            {
                                value = default;
                                return false;
                            }

                            if (this.jsonElementBacking.TryGetProperty(name, out JsonElement element))
                            {
                                value = new(element);
                                return true;
                            }

                            value = default;
                            return false;
                        }

                        if ((this.backing & Backing.Object) != 0)
                        {
                            if (this.objectBacking.TryGetValue(name, out JsonAny result))
                            {
                                value = result;
                                return true;
                            }

                            value = default;
                            return false;
                        }

                        throw new InvalidOperationException();
                    }

                    /// <summary>
                    /// Get a property.
                    /// </summary>
                    /// <param name = "name">The name of the property.</param>
                    /// <param name = "value">The value of the property.</param>
                    /// <returns><c>True</c> if the property was present.</returns>
                    /// <exception cref = "InvalidOperationException">The value is not an object.</exception>
                    public bool TryGetProperty(ReadOnlySpan<byte> name, out JsonAny value)
                    {
                        if ((this.backing & Backing.JsonElement) != 0)
                        {
                            if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                            {
                                value = default;
                                return false;
                            }

                            if (this.jsonElementBacking.TryGetProperty(name, out JsonElement element))
                            {
                                value = new(element);
                                return true;
                            }

                            value = default;
                            return false;
                        }

                        if ((this.backing & Backing.Object) != 0)
                        {
                            if (this.objectBacking.TryGetValue(name, out JsonAny result))
                            {
                                value = result;
                                return true;
                            }

                            value = default;
                            return false;
                        }

                        throw new InvalidOperationException();
                    }

                    /// <inheritdoc/>
                    public bool TryGetProperty<TValue>(in JsonPropertyName name, out TValue value)
                        where TValue : struct, IJsonValue<TValue>
                    {
                        if ((this.backing & Backing.JsonElement) != 0)
                        {
                            if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                            {
                                value = default;
                                return false;
                            }

                            if (name.TryGetProperty(this.jsonElementBacking, out JsonElement element))
                            {
#if NET8_0_OR_GREATER
                                value = TValue.FromJson(element);
#else
                                value = JsonValueNetStandard20Extensions.FromJsonElement<TValue>(element);
#endif
                                return true;
                            }

                            value = default;
                            return false;
                        }

                        if ((this.backing & Backing.Object) != 0)
                        {
                            if (this.objectBacking.TryGetValue(name, out JsonAny result))
                            {
#if NET8_0_OR_GREATER
                                value = TValue.FromAny(result);
#else
                                value = result.As<TValue>();
#endif
                                return true;
                            }

                            value = default;
                            return false;
                        }

                        throw new InvalidOperationException();
                    }

                    /// <inheritdoc/>
                    public bool TryGetProperty<TValue>(string name, out TValue value)
                        where TValue : struct, IJsonValue<TValue>
                    {
                        if ((this.backing & Backing.JsonElement) != 0)
                        {
                            if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                            {
                                value = default;
                                return false;
                            }

                            if (this.jsonElementBacking.TryGetProperty(name, out JsonElement element))
                            {
#if NET8_0_OR_GREATER
                                value = TValue.FromJson(element);
#else
                                value = JsonValueNetStandard20Extensions.FromJsonElement<TValue>(element);
#endif
                                return true;
                            }

                            value = default;
                            return false;
                        }

                        if ((this.backing & Backing.Object) != 0)
                        {
                            if (this.objectBacking.TryGetValue(name, out JsonAny result))
                            {
#if NET8_0_OR_GREATER
                                value = TValue.FromAny(result);
#else
                                value = result.As<TValue>();
#endif
                                return true;
                            }

                            value = default;
                            return false;
                        }

                        throw new InvalidOperationException();
                    }

                    /// <inheritdoc/>
                    public bool TryGetProperty<TValue>(ReadOnlySpan<char> name, out TValue value)
                        where TValue : struct, IJsonValue<TValue>
                    {
                        if ((this.backing & Backing.JsonElement) != 0)
                        {
                            if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                            {
                                value = default;
                                return false;
                            }

                            if (this.jsonElementBacking.TryGetProperty(name, out JsonElement element))
                            {
#if NET8_0_OR_GREATER
                                value = TValue.FromJson(element);
#else
                                value = JsonValueNetStandard20Extensions.FromJsonElement<TValue>(element);
#endif
                                return true;
                            }

                            value = default;
                            return false;
                        }

                        if ((this.backing & Backing.Object) != 0)
                        {
                            if (this.objectBacking.TryGetValue(name, out JsonAny result))
                            {
#if NET8_0_OR_GREATER
                                value = TValue.FromAny(result);
#else
                                value = result.As<TValue>();
#endif
                                return true;
                            }

                            value = default;
                            return false;
                        }

                        throw new InvalidOperationException();
                    }

                    /// <inheritdoc/>
                    public bool TryGetProperty<TValue>(ReadOnlySpan<byte> name, out TValue value)
                        where TValue : struct, IJsonValue<TValue>
                    {
                        if ((this.backing & Backing.JsonElement) != 0)
                        {
                            if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                            {
                                value = default;
                                return false;
                            }

                            if (this.jsonElementBacking.TryGetProperty(name, out JsonElement element))
                            {
#if NET8_0_OR_GREATER
                                value = TValue.FromJson(element);
#else
                                value = JsonValueNetStandard20Extensions.FromJsonElement<TValue>(element);
#endif
                                return true;
                            }

                            value = default;
                            return false;
                        }

                        if ((this.backing & Backing.Object) != 0)
                        {
                            if (this.objectBacking.TryGetValue(name, out JsonAny result))
                            {
#if NET8_0_OR_GREATER
                                value = TValue.FromAny(result);
#else
                                value = result.As<TValue>();
#endif
                                return true;
                            }

                            value = default;
                            return false;
                        }

                        throw new InvalidOperationException();
                    }

                    /// <inheritdoc/>
                    public FileProperties SetProperty<TValue>(in JsonPropertyName name, TValue value)
                        where TValue : struct, IJsonValue
                    {
                        return new(__CorvusObjectHelpers.GetPropertyBackingWith(this, name, value.AsAny));
                    }

                    /// <inheritdoc/>
                    public FileProperties RemoveProperty(in JsonPropertyName name)
                    {
                        return new(__CorvusObjectHelpers.GetPropertyBackingWithout(this, name));
                    }

                    /// <inheritdoc/>
                    public FileProperties RemoveProperty(string name)
                    {
                        return new(__CorvusObjectHelpers.GetPropertyBackingWithout(this, name));
                    }

                    /// <inheritdoc/>
                    public FileProperties RemoveProperty(ReadOnlySpan<char> name)
                    {
                        return new(__CorvusObjectHelpers.GetPropertyBackingWithout(this, name));
                    }

                    /// <inheritdoc/>
                    public FileProperties RemoveProperty(ReadOnlySpan<byte> name)
                    {
                        return new(__CorvusObjectHelpers.GetPropertyBackingWithout(this, name));
                    }

                    /// <summary>
                    /// Provides UTF8 and string versions of the JSON property names on the object.
                    /// </summary>
                    public static class JsonPropertyNames
                    {
                        /// <summary>
                        /// Gets the JSON property name for <see cref = "ChangeTime"/>.
                        /// </summary>
                        public const string ChangeTime = "ChangeTime";
                        /// <summary>
                        /// Gets the JSON property name for <see cref = "ContentLength"/>.
                        /// </summary>
                        public const string ContentLength = "Content-Length";
                        /// <summary>
                        /// Gets the JSON property name for <see cref = "CreationTime"/>.
                        /// </summary>
                        public const string CreationTime = "CreationTime";
                        /// <summary>
                        /// Gets the JSON property name for <see cref = "Etag"/>.
                        /// </summary>
                        public const string Etag = "Etag";
                        /// <summary>
                        /// Gets the JSON property name for <see cref = "LastModified"/>.
                        /// </summary>
                        public const string LastModified = "Last-Modified";
                        /// <summary>
                        /// Gets the JSON property name for <see cref = "LastAccessTime"/>.
                        /// </summary>
                        public const string LastAccessTime = "LastAccessTime";
                        /// <summary>
                        /// Gets the JSON property name for <see cref = "LastWriteTime"/>.
                        /// </summary>
                        public const string LastWriteTime = "LastWriteTime";
                        /// <summary>
                        /// Gets the JSON property name for <see cref = "ChangeTime"/>.
                        /// </summary>
                        public static ReadOnlySpan<byte> ChangeTimeUtf8 => "ChangeTime"u8;
                        /// <summary>
                        /// Gets the JSON property name for <see cref = "ContentLength"/>.
                        /// </summary>
                        public static ReadOnlySpan<byte> ContentLengthUtf8 => "Content-Length"u8;
                        /// <summary>
                        /// Gets the JSON property name for <see cref = "CreationTime"/>.
                        /// </summary>
                        public static ReadOnlySpan<byte> CreationTimeUtf8 => "CreationTime"u8;
                        /// <summary>
                        /// Gets the JSON property name for <see cref = "Etag"/>.
                        /// </summary>
                        public static ReadOnlySpan<byte> EtagUtf8 => "Etag"u8;
                        /// <summary>
                        /// Gets the JSON property name for <see cref = "LastModified"/>.
                        /// </summary>
                        public static ReadOnlySpan<byte> LastModifiedUtf8 => "Last-Modified"u8;
                        /// <summary>
                        /// Gets the JSON property name for <see cref = "LastAccessTime"/>.
                        /// </summary>
                        public static ReadOnlySpan<byte> LastAccessTimeUtf8 => "LastAccessTime"u8;
                        /// <summary>
                        /// Gets the JSON property name for <see cref = "LastWriteTime"/>.
                        /// </summary>
                        public static ReadOnlySpan<byte> LastWriteTimeUtf8 => "LastWriteTime"u8;
                    }

                    private static class __CorvusObjectHelpers
                    {
                        /// <summary>
                        /// Builds an <see cref = "ImmutableList{JsonObjectProperty}"/> from the object.
                        /// </summary>
                        /// <returns>An immutable list of <see cref = "JsonAny"/> built from the object.</returns>
                        /// <exception cref = "InvalidOperationException">The value is not an object.</exception>
                        public static ImmutableList<JsonObjectProperty> GetPropertyBacking(in FileProperties that)
                        {
                            if ((that.backing & Backing.Object) != 0)
                            {
                                return that.objectBacking;
                            }

                            if ((that.backing & Backing.JsonElement) != 0)
                            {
                                return PropertyBackingBuilders.GetPropertyBackingBuilder(that.jsonElementBacking).ToImmutable();
                            }

                            throw new InvalidOperationException();
                        }

                        /// <summary>
                        /// Builds an <see cref = "ImmutableList{JsonObjectProperty}"/> from the object, without a specific property.
                        /// </summary>
                        /// <returns>An immutable list of <see cref = "JsonObjectProperty"/>, built from the existing object, without the given property.</returns>
                        /// <exception cref = "InvalidOperationException">The value is not an object.</exception>
                        public static ImmutableList<JsonObjectProperty> GetPropertyBackingWithout(in FileProperties that, in JsonPropertyName name)
                        {
                            if ((that.backing & Backing.Object) != 0)
                            {
                                return that.objectBacking.Remove(name);
                            }

                            if ((that.backing & Backing.JsonElement) != 0)
                            {
                                return PropertyBackingBuilders.GetPropertyBackingBuilderWithout(that.jsonElementBacking, name).ToImmutable();
                            }

                            throw new InvalidOperationException();
                        }

                        /// <summary>
                        /// Builds an <see cref = "ImmutableList{JsonObjectProperty}"/> from the object, without a specific property.
                        /// </summary>
                        /// <returns>An immutable list of <see cref = "JsonObjectProperty"/>, built from the existing object, without the given property.</returns>
                        /// <exception cref = "InvalidOperationException">The value is not an object.</exception>
                        public static ImmutableList<JsonObjectProperty> GetPropertyBackingWithout(in FileProperties that, ReadOnlySpan<char> name)
                        {
                            if ((that.backing & Backing.Object) != 0)
                            {
                                return that.objectBacking.Remove(name);
                            }

                            if ((that.backing & Backing.JsonElement) != 0)
                            {
                                return PropertyBackingBuilders.GetPropertyBackingBuilderWithout(that.jsonElementBacking, name).ToImmutable();
                            }

                            throw new InvalidOperationException();
                        }

                        /// <summary>
                        /// Builds an <see cref = "ImmutableList{JsonObjectProperty}"/> from the object, without a specific property.
                        /// </summary>
                        /// <returns>An immutable list of <see cref = "JsonObjectProperty"/>, built from the existing object, without the given property.</returns>
                        /// <exception cref = "InvalidOperationException">The value is not an object.</exception>
                        public static ImmutableList<JsonObjectProperty> GetPropertyBackingWithout(in FileProperties that, ReadOnlySpan<byte> name)
                        {
                            if ((that.backing & Backing.Object) != 0)
                            {
                                return that.objectBacking.Remove(name);
                            }

                            if ((that.backing & Backing.JsonElement) != 0)
                            {
                                return PropertyBackingBuilders.GetPropertyBackingBuilderWithout(that.jsonElementBacking, name).ToImmutable();
                            }

                            throw new InvalidOperationException();
                        }

                        /// <summary>
                        /// Builds an <see cref = "ImmutableList{JsonObjectProperty}"/> from the object, without a specific property.
                        /// </summary>
                        /// <returns>An immutable list of <see cref = "JsonObjectProperty"/>, built from the existing object, without the given property.</returns>
                        /// <exception cref = "InvalidOperationException">The value is not an object.</exception>
                        public static ImmutableList<JsonObjectProperty> GetPropertyBackingWithout(in FileProperties that, string name)
                        {
                            if ((that.backing & Backing.Object) != 0)
                            {
                                return that.objectBacking.Remove(name);
                            }

                            if ((that.backing & Backing.JsonElement) != 0)
                            {
                                return PropertyBackingBuilders.GetPropertyBackingBuilderWithout(that.jsonElementBacking, name).ToImmutable();
                            }

                            throw new InvalidOperationException();
                        }

                        /// <summary>
                        /// Builds an <see cref = "ImmutableList{JsonObjectProperty}"/> from the object, without a specific property.
                        /// </summary>
                        /// <returns>An immutable list of <see cref = "JsonObjectProperty"/>, built from the existing object, with the given property.</returns>
                        /// <exception cref = "InvalidOperationException">The value is not an object.</exception>
                        public static ImmutableList<JsonObjectProperty> GetPropertyBackingWith(in FileProperties that, in JsonPropertyName name, in JsonAny value)
                        {
                            if ((that.backing & Backing.Object) != 0)
                            {
                                return that.objectBacking.SetItem(name, value);
                            }

                            if ((that.backing & Backing.JsonElement) != 0)
                            {
                                return PropertyBackingBuilders.GetPropertyBackingBuilderReplacing(that.jsonElementBacking, name, value).ToImmutable();
                            }

                            throw new InvalidOperationException();
                        }
                    }
                }
            }
        }
    }
}
