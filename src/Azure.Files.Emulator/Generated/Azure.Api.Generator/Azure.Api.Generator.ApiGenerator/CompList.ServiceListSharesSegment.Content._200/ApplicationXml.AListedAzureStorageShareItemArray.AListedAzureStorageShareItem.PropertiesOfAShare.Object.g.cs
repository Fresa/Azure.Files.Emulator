//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System.Collections.Immutable;
using System.Text.Json;
using Corvus.Json;
using Corvus.Json.Internal;

namespace CompList.ServiceListSharesSegment.Content._200;
/// <summary>
/// Generated from JSON Schema.
/// </summary>
/// <remarks>
/// <para>
/// An enumeration of shares.
/// </para>
/// </remarks>
public readonly partial struct ApplicationXml
{
    /// <summary>
    /// Generated from JSON Schema.
    /// </summary>
    public readonly partial struct AListedAzureStorageShareItemArray
    {
        /// <summary>
        /// Generated from JSON Schema.
        /// </summary>
        /// <remarks>
        /// <para>
        /// A listed Azure Storage share item.
        /// </para>
        /// </remarks>
        public readonly partial struct AListedAzureStorageShareItem
        {
            /// <summary>
            /// Generated from JSON Schema.
            /// </summary>
            /// <remarks>
            /// <para>
            /// Properties of a share.
            /// </para>
            /// </remarks>
            public readonly partial struct PropertiesOfAShare : IJsonObject<CompList.ServiceListSharesSegment.Content._200.ApplicationXml.AListedAzureStorageShareItemArray.AListedAzureStorageShareItem.PropertiesOfAShare>
            {
                /// <summary>
                /// Conversion from <see cref = "ImmutableList{JsonObjectProperty}"/>.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator PropertiesOfAShare(ImmutableList<JsonObjectProperty> value)
                {
                    return new(value);
                }

                /// <summary>
                /// Conversion to <see cref = "ImmutableList{JsonObjectProperty}"/>.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator ImmutableList<JsonObjectProperty>(PropertiesOfAShare value)
                {
                    return __CorvusObjectHelpers.GetPropertyBacking(value);
                }

                /// <summary>
                /// Conversion from JsonObject.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator PropertiesOfAShare(JsonObject value)
                {
                    if (value.HasDotnetBacking && value.ValueKind == JsonValueKind.Object)
                    {
                        return new(__CorvusObjectHelpers.GetPropertyBacking(value));
                    }

                    return new(value.AsJsonElement);
                }

                /// <summary>
                /// Conversion to JsonObject.
                /// </summary>
                /// <param name = "value">The value from which to convert.</param>
                public static implicit operator JsonObject(PropertiesOfAShare value)
                {
                    return value.AsObject;
                }

                /// <inheritdoc/>
                public Corvus.Json.JsonAny this[in JsonPropertyName name]
                {
                    get
                    {
                        if (this.TryGetProperty(name, out Corvus.Json.JsonAny result))
                        {
                            return result;
                        }

                        throw new InvalidOperationException();
                    }
                }

                /// <summary>
                /// Gets the number of properties in the object.
                /// </summary>
                public int Count
                {
                    get
                    {
                        if ((this.backing & Backing.JsonElement) != 0)
                        {
                            return this.jsonElementBacking.GetPropertyCount();
                        }

                        if ((this.backing & Backing.Object) != 0)
                        {
                            return this.objectBacking.Count;
                        }

                        throw new InvalidOperationException();
                    }
                }

                /// <summary>
                /// Gets the (optional) <c>AccessTier</c> property.
                /// </summary>
                /// <remarks>
                /// <para>
                /// If this JSON property is <see cref = "JsonValueKind.Undefined"/> then the value returned will be <see langword="null"/>.
                /// </para>
                /// </remarks>
                public Corvus.Json.JsonString? AccessTier
                {
                    get
                    {
                        if ((this.backing & Backing.JsonElement) != 0)
                        {
                            if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                            {
                                return default;
                            }

                            if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.AccessTierUtf8, out JsonElement result))
                            {
                                if (result.ValueKind == JsonValueKind.Null || result.ValueKind == JsonValueKind.Undefined)
                                {
                                    return default;
                                }

                                return new(result);
                            }
                        }

                        if ((this.backing & Backing.Object) != 0)
                        {
                            if (this.objectBacking.TryGetValue(JsonPropertyNames.AccessTier, out JsonAny result))
                            {
                                if (result.IsNullOrUndefined())
                                {
                                    return default;
                                }

                                return result.As<Corvus.Json.JsonString>();
                            }
                        }

                        return default;
                    }
                }

                /// <summary>
                /// Gets the (optional) <c>AccessTierChangeTime</c> property.
                /// </summary>
                /// <remarks>
                /// <para>
                /// If this JSON property is <see cref = "JsonValueKind.Undefined"/> then the value returned will be <see langword="null"/>.
                /// </para>
                /// </remarks>
                public Corvus.Json.JsonString? AccessTierChangeTime
                {
                    get
                    {
                        if ((this.backing & Backing.JsonElement) != 0)
                        {
                            if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                            {
                                return default;
                            }

                            if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.AccessTierChangeTimeUtf8, out JsonElement result))
                            {
                                if (result.ValueKind == JsonValueKind.Null || result.ValueKind == JsonValueKind.Undefined)
                                {
                                    return default;
                                }

                                return new(result);
                            }
                        }

                        if ((this.backing & Backing.Object) != 0)
                        {
                            if (this.objectBacking.TryGetValue(JsonPropertyNames.AccessTierChangeTime, out JsonAny result))
                            {
                                if (result.IsNullOrUndefined())
                                {
                                    return default;
                                }

                                return result.As<Corvus.Json.JsonString>();
                            }
                        }

                        return default;
                    }
                }

                /// <summary>
                /// Gets the (optional) <c>AccessTierTransitionState</c> property.
                /// </summary>
                /// <remarks>
                /// <para>
                /// If this JSON property is <see cref = "JsonValueKind.Undefined"/> then the value returned will be <see langword="null"/>.
                /// </para>
                /// </remarks>
                public Corvus.Json.JsonString? AccessTierTransitionState
                {
                    get
                    {
                        if ((this.backing & Backing.JsonElement) != 0)
                        {
                            if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                            {
                                return default;
                            }

                            if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.AccessTierTransitionStateUtf8, out JsonElement result))
                            {
                                if (result.ValueKind == JsonValueKind.Null || result.ValueKind == JsonValueKind.Undefined)
                                {
                                    return default;
                                }

                                return new(result);
                            }
                        }

                        if ((this.backing & Backing.Object) != 0)
                        {
                            if (this.objectBacking.TryGetValue(JsonPropertyNames.AccessTierTransitionState, out JsonAny result))
                            {
                                if (result.IsNullOrUndefined())
                                {
                                    return default;
                                }

                                return result.As<Corvus.Json.JsonString>();
                            }
                        }

                        return default;
                    }
                }

                /// <summary>
                /// Gets the (optional) <c>DeletedTime</c> property.
                /// </summary>
                /// <remarks>
                /// <para>
                /// If this JSON property is <see cref = "JsonValueKind.Undefined"/> then the value returned will be <see langword="null"/>.
                /// </para>
                /// </remarks>
                public Corvus.Json.JsonString? DeletedTime
                {
                    get
                    {
                        if ((this.backing & Backing.JsonElement) != 0)
                        {
                            if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                            {
                                return default;
                            }

                            if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.DeletedTimeUtf8, out JsonElement result))
                            {
                                if (result.ValueKind == JsonValueKind.Null || result.ValueKind == JsonValueKind.Undefined)
                                {
                                    return default;
                                }

                                return new(result);
                            }
                        }

                        if ((this.backing & Backing.Object) != 0)
                        {
                            if (this.objectBacking.TryGetValue(JsonPropertyNames.DeletedTime, out JsonAny result))
                            {
                                if (result.IsNullOrUndefined())
                                {
                                    return default;
                                }

                                return result.As<Corvus.Json.JsonString>();
                            }
                        }

                        return default;
                    }
                }

                /// <summary>
                /// Gets the (optional) <c>EnabledProtocols</c> property.
                /// </summary>
                /// <remarks>
                /// <para>
                /// If this JSON property is <see cref = "JsonValueKind.Undefined"/> then the value returned will be <see langword="null"/>.
                /// </para>
                /// </remarks>
                public Corvus.Json.JsonString? EnabledProtocols
                {
                    get
                    {
                        if ((this.backing & Backing.JsonElement) != 0)
                        {
                            if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                            {
                                return default;
                            }

                            if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.EnabledProtocolsUtf8, out JsonElement result))
                            {
                                if (result.ValueKind == JsonValueKind.Null || result.ValueKind == JsonValueKind.Undefined)
                                {
                                    return default;
                                }

                                return new(result);
                            }
                        }

                        if ((this.backing & Backing.Object) != 0)
                        {
                            if (this.objectBacking.TryGetValue(JsonPropertyNames.EnabledProtocols, out JsonAny result))
                            {
                                if (result.IsNullOrUndefined())
                                {
                                    return default;
                                }

                                return result.As<Corvus.Json.JsonString>();
                            }
                        }

                        return default;
                    }
                }

                /// <summary>
                /// Gets the (optional) <c>EnableSnapshotVirtualDirectoryAccess</c> property.
                /// </summary>
                /// <remarks>
                /// <para>
                /// If this JSON property is <see cref = "JsonValueKind.Undefined"/> then the value returned will be <see langword="null"/>.
                /// </para>
                /// </remarks>
                public Corvus.Json.JsonBoolean? EnableSnapshotVirtualDirectoryAccess
                {
                    get
                    {
                        if ((this.backing & Backing.JsonElement) != 0)
                        {
                            if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                            {
                                return default;
                            }

                            if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.EnableSnapshotVirtualDirectoryAccessUtf8, out JsonElement result))
                            {
                                if (result.ValueKind == JsonValueKind.Null || result.ValueKind == JsonValueKind.Undefined)
                                {
                                    return default;
                                }

                                return new(result);
                            }
                        }

                        if ((this.backing & Backing.Object) != 0)
                        {
                            if (this.objectBacking.TryGetValue(JsonPropertyNames.EnableSnapshotVirtualDirectoryAccess, out JsonAny result))
                            {
                                if (result.IsNullOrUndefined())
                                {
                                    return default;
                                }

                                return result.As<Corvus.Json.JsonBoolean>();
                            }
                        }

                        return default;
                    }
                }

                /// <summary>
                /// Gets the <c>Etag</c> property.
                /// </summary>
                /// <remarks>
                /// <para>
                /// If the instance is valid, this property will not be <see cref = "JsonValueKind.Undefined"/>.
                /// </para>
                /// </remarks>
                public Corvus.Json.JsonString Etag
                {
                    get
                    {
                        if ((this.backing & Backing.JsonElement) != 0)
                        {
                            if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                            {
                                return default;
                            }

                            if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.EtagUtf8, out JsonElement result))
                            {
                                return new(result);
                            }
                        }

                        if ((this.backing & Backing.Object) != 0)
                        {
                            if (this.objectBacking.TryGetValue(JsonPropertyNames.Etag, out JsonAny result))
                            {
                                return result.As<Corvus.Json.JsonString>();
                            }
                        }

                        return default;
                    }
                }

                /// <summary>
                /// Gets the (optional) <c>IncludedBurstIops</c> property.
                /// </summary>
                /// <remarks>
                /// <para>
                /// If this JSON property is <see cref = "JsonValueKind.Undefined"/> then the value returned will be <see langword="null"/>.
                /// </para>
                /// </remarks>
                public Corvus.Json.JsonInt64? IncludedBurstIops
                {
                    get
                    {
                        if ((this.backing & Backing.JsonElement) != 0)
                        {
                            if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                            {
                                return default;
                            }

                            if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.IncludedBurstIopsUtf8, out JsonElement result))
                            {
                                if (result.ValueKind == JsonValueKind.Null || result.ValueKind == JsonValueKind.Undefined)
                                {
                                    return default;
                                }

                                return new(result);
                            }
                        }

                        if ((this.backing & Backing.Object) != 0)
                        {
                            if (this.objectBacking.TryGetValue(JsonPropertyNames.IncludedBurstIops, out JsonAny result))
                            {
                                if (result.IsNullOrUndefined())
                                {
                                    return default;
                                }

                                return result.As<Corvus.Json.JsonInt64>();
                            }
                        }

                        return default;
                    }
                }

                /// <summary>
                /// Gets the <c>Last-Modified</c> property.
                /// </summary>
                /// <remarks>
                /// <para>
                /// If the instance is valid, this property will not be <see cref = "JsonValueKind.Undefined"/>.
                /// </para>
                /// </remarks>
                public Corvus.Json.JsonString LastModified
                {
                    get
                    {
                        if ((this.backing & Backing.JsonElement) != 0)
                        {
                            if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                            {
                                return default;
                            }

                            if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.LastModifiedUtf8, out JsonElement result))
                            {
                                return new(result);
                            }
                        }

                        if ((this.backing & Backing.Object) != 0)
                        {
                            if (this.objectBacking.TryGetValue(JsonPropertyNames.LastModified, out JsonAny result))
                            {
                                return result.As<Corvus.Json.JsonString>();
                            }
                        }

                        return default;
                    }
                }

                /// <summary>
                /// Gets the (optional) <c>LeaseDuration</c> property.
                /// </summary>
                /// <remarks>
                /// <para>
                /// If this JSON property is <see cref = "JsonValueKind.Undefined"/> then the value returned will be <see langword="null"/>.
                /// </para>
                /// <para>
                /// When a share is leased, specifies whether the lease is of infinite or fixed duration.
                /// </para>
                /// </remarks>
                public CompList.ServiceListSharesSegment.Content._200.ApplicationXml.AListedAzureStorageShareItemArray.AListedAzureStorageShareItem.PropertiesOfAShare.LeaseDurationEntity? LeaseDuration
                {
                    get
                    {
                        if ((this.backing & Backing.JsonElement) != 0)
                        {
                            if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                            {
                                return default;
                            }

                            if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.LeaseDurationUtf8, out JsonElement result))
                            {
                                if (result.ValueKind == JsonValueKind.Null || result.ValueKind == JsonValueKind.Undefined)
                                {
                                    return default;
                                }

                                return new(result);
                            }
                        }

                        if ((this.backing & Backing.Object) != 0)
                        {
                            if (this.objectBacking.TryGetValue(JsonPropertyNames.LeaseDuration, out JsonAny result))
                            {
                                if (result.IsNullOrUndefined())
                                {
                                    return default;
                                }

                                return result.As<CompList.ServiceListSharesSegment.Content._200.ApplicationXml.AListedAzureStorageShareItemArray.AListedAzureStorageShareItem.PropertiesOfAShare.LeaseDurationEntity>();
                            }
                        }

                        return default;
                    }
                }

                /// <summary>
                /// Gets the (optional) <c>LeaseState</c> property.
                /// </summary>
                /// <remarks>
                /// <para>
                /// If this JSON property is <see cref = "JsonValueKind.Undefined"/> then the value returned will be <see langword="null"/>.
                /// </para>
                /// <para>
                /// Lease state of the share.
                /// </para>
                /// </remarks>
                public CompList.ServiceListSharesSegment.Content._200.ApplicationXml.AListedAzureStorageShareItemArray.AListedAzureStorageShareItem.PropertiesOfAShare.LeaseStateOfTheShare? LeaseState
                {
                    get
                    {
                        if ((this.backing & Backing.JsonElement) != 0)
                        {
                            if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                            {
                                return default;
                            }

                            if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.LeaseStateUtf8, out JsonElement result))
                            {
                                if (result.ValueKind == JsonValueKind.Null || result.ValueKind == JsonValueKind.Undefined)
                                {
                                    return default;
                                }

                                return new(result);
                            }
                        }

                        if ((this.backing & Backing.Object) != 0)
                        {
                            if (this.objectBacking.TryGetValue(JsonPropertyNames.LeaseState, out JsonAny result))
                            {
                                if (result.IsNullOrUndefined())
                                {
                                    return default;
                                }

                                return result.As<CompList.ServiceListSharesSegment.Content._200.ApplicationXml.AListedAzureStorageShareItemArray.AListedAzureStorageShareItem.PropertiesOfAShare.LeaseStateOfTheShare>();
                            }
                        }

                        return default;
                    }
                }

                /// <summary>
                /// Gets the (optional) <c>LeaseStatus</c> property.
                /// </summary>
                /// <remarks>
                /// <para>
                /// If this JSON property is <see cref = "JsonValueKind.Undefined"/> then the value returned will be <see langword="null"/>.
                /// </para>
                /// <para>
                /// The current lease status of the share.
                /// </para>
                /// </remarks>
                public CompList.ServiceListSharesSegment.Content._200.ApplicationXml.AListedAzureStorageShareItemArray.AListedAzureStorageShareItem.PropertiesOfAShare.TheCurrentLeaseStatusOfTheShare? LeaseStatus
                {
                    get
                    {
                        if ((this.backing & Backing.JsonElement) != 0)
                        {
                            if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                            {
                                return default;
                            }

                            if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.LeaseStatusUtf8, out JsonElement result))
                            {
                                if (result.ValueKind == JsonValueKind.Null || result.ValueKind == JsonValueKind.Undefined)
                                {
                                    return default;
                                }

                                return new(result);
                            }
                        }

                        if ((this.backing & Backing.Object) != 0)
                        {
                            if (this.objectBacking.TryGetValue(JsonPropertyNames.LeaseStatus, out JsonAny result))
                            {
                                if (result.IsNullOrUndefined())
                                {
                                    return default;
                                }

                                return result.As<CompList.ServiceListSharesSegment.Content._200.ApplicationXml.AListedAzureStorageShareItemArray.AListedAzureStorageShareItem.PropertiesOfAShare.TheCurrentLeaseStatusOfTheShare>();
                            }
                        }

                        return default;
                    }
                }

                /// <summary>
                /// Gets the (optional) <c>MaxBurstCreditsForIops</c> property.
                /// </summary>
                /// <remarks>
                /// <para>
                /// If this JSON property is <see cref = "JsonValueKind.Undefined"/> then the value returned will be <see langword="null"/>.
                /// </para>
                /// </remarks>
                public Corvus.Json.JsonInt64? MaxBurstCreditsForIops
                {
                    get
                    {
                        if ((this.backing & Backing.JsonElement) != 0)
                        {
                            if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                            {
                                return default;
                            }

                            if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.MaxBurstCreditsForIopsUtf8, out JsonElement result))
                            {
                                if (result.ValueKind == JsonValueKind.Null || result.ValueKind == JsonValueKind.Undefined)
                                {
                                    return default;
                                }

                                return new(result);
                            }
                        }

                        if ((this.backing & Backing.Object) != 0)
                        {
                            if (this.objectBacking.TryGetValue(JsonPropertyNames.MaxBurstCreditsForIops, out JsonAny result))
                            {
                                if (result.IsNullOrUndefined())
                                {
                                    return default;
                                }

                                return result.As<Corvus.Json.JsonInt64>();
                            }
                        }

                        return default;
                    }
                }

                /// <summary>
                /// Gets the (optional) <c>NextAllowedProvisionedBandwidthDowngradeTime</c> property.
                /// </summary>
                /// <remarks>
                /// <para>
                /// If this JSON property is <see cref = "JsonValueKind.Undefined"/> then the value returned will be <see langword="null"/>.
                /// </para>
                /// </remarks>
                public Corvus.Json.JsonString? NextAllowedProvisionedBandwidthDowngradeTime
                {
                    get
                    {
                        if ((this.backing & Backing.JsonElement) != 0)
                        {
                            if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                            {
                                return default;
                            }

                            if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.NextAllowedProvisionedBandwidthDowngradeTimeUtf8, out JsonElement result))
                            {
                                if (result.ValueKind == JsonValueKind.Null || result.ValueKind == JsonValueKind.Undefined)
                                {
                                    return default;
                                }

                                return new(result);
                            }
                        }

                        if ((this.backing & Backing.Object) != 0)
                        {
                            if (this.objectBacking.TryGetValue(JsonPropertyNames.NextAllowedProvisionedBandwidthDowngradeTime, out JsonAny result))
                            {
                                if (result.IsNullOrUndefined())
                                {
                                    return default;
                                }

                                return result.As<Corvus.Json.JsonString>();
                            }
                        }

                        return default;
                    }
                }

                /// <summary>
                /// Gets the (optional) <c>NextAllowedProvisionedIopsDowngradeTime</c> property.
                /// </summary>
                /// <remarks>
                /// <para>
                /// If this JSON property is <see cref = "JsonValueKind.Undefined"/> then the value returned will be <see langword="null"/>.
                /// </para>
                /// </remarks>
                public Corvus.Json.JsonString? NextAllowedProvisionedIopsDowngradeTime
                {
                    get
                    {
                        if ((this.backing & Backing.JsonElement) != 0)
                        {
                            if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                            {
                                return default;
                            }

                            if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.NextAllowedProvisionedIopsDowngradeTimeUtf8, out JsonElement result))
                            {
                                if (result.ValueKind == JsonValueKind.Null || result.ValueKind == JsonValueKind.Undefined)
                                {
                                    return default;
                                }

                                return new(result);
                            }
                        }

                        if ((this.backing & Backing.Object) != 0)
                        {
                            if (this.objectBacking.TryGetValue(JsonPropertyNames.NextAllowedProvisionedIopsDowngradeTime, out JsonAny result))
                            {
                                if (result.IsNullOrUndefined())
                                {
                                    return default;
                                }

                                return result.As<Corvus.Json.JsonString>();
                            }
                        }

                        return default;
                    }
                }

                /// <summary>
                /// Gets the (optional) <c>NextAllowedQuotaDowngradeTime</c> property.
                /// </summary>
                /// <remarks>
                /// <para>
                /// If this JSON property is <see cref = "JsonValueKind.Undefined"/> then the value returned will be <see langword="null"/>.
                /// </para>
                /// </remarks>
                public Corvus.Json.JsonString? NextAllowedQuotaDowngradeTime
                {
                    get
                    {
                        if ((this.backing & Backing.JsonElement) != 0)
                        {
                            if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                            {
                                return default;
                            }

                            if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.NextAllowedQuotaDowngradeTimeUtf8, out JsonElement result))
                            {
                                if (result.ValueKind == JsonValueKind.Null || result.ValueKind == JsonValueKind.Undefined)
                                {
                                    return default;
                                }

                                return new(result);
                            }
                        }

                        if ((this.backing & Backing.Object) != 0)
                        {
                            if (this.objectBacking.TryGetValue(JsonPropertyNames.NextAllowedQuotaDowngradeTime, out JsonAny result))
                            {
                                if (result.IsNullOrUndefined())
                                {
                                    return default;
                                }

                                return result.As<Corvus.Json.JsonString>();
                            }
                        }

                        return default;
                    }
                }

                /// <summary>
                /// Gets the (optional) <c>PaidBurstingEnabled</c> property.
                /// </summary>
                /// <remarks>
                /// <para>
                /// If this JSON property is <see cref = "JsonValueKind.Undefined"/> then the value returned will be <see langword="null"/>.
                /// </para>
                /// </remarks>
                public Corvus.Json.JsonBoolean? PaidBurstingEnabled
                {
                    get
                    {
                        if ((this.backing & Backing.JsonElement) != 0)
                        {
                            if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                            {
                                return default;
                            }

                            if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.PaidBurstingEnabledUtf8, out JsonElement result))
                            {
                                if (result.ValueKind == JsonValueKind.Null || result.ValueKind == JsonValueKind.Undefined)
                                {
                                    return default;
                                }

                                return new(result);
                            }
                        }

                        if ((this.backing & Backing.Object) != 0)
                        {
                            if (this.objectBacking.TryGetValue(JsonPropertyNames.PaidBurstingEnabled, out JsonAny result))
                            {
                                if (result.IsNullOrUndefined())
                                {
                                    return default;
                                }

                                return result.As<Corvus.Json.JsonBoolean>();
                            }
                        }

                        return default;
                    }
                }

                /// <summary>
                /// Gets the (optional) <c>PaidBurstingMaxBandwidthMibps</c> property.
                /// </summary>
                /// <remarks>
                /// <para>
                /// If this JSON property is <see cref = "JsonValueKind.Undefined"/> then the value returned will be <see langword="null"/>.
                /// </para>
                /// </remarks>
                public Corvus.Json.JsonInt64? PaidBurstingMaxBandwidthMibps
                {
                    get
                    {
                        if ((this.backing & Backing.JsonElement) != 0)
                        {
                            if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                            {
                                return default;
                            }

                            if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.PaidBurstingMaxBandwidthMibpsUtf8, out JsonElement result))
                            {
                                if (result.ValueKind == JsonValueKind.Null || result.ValueKind == JsonValueKind.Undefined)
                                {
                                    return default;
                                }

                                return new(result);
                            }
                        }

                        if ((this.backing & Backing.Object) != 0)
                        {
                            if (this.objectBacking.TryGetValue(JsonPropertyNames.PaidBurstingMaxBandwidthMibps, out JsonAny result))
                            {
                                if (result.IsNullOrUndefined())
                                {
                                    return default;
                                }

                                return result.As<Corvus.Json.JsonInt64>();
                            }
                        }

                        return default;
                    }
                }

                /// <summary>
                /// Gets the (optional) <c>PaidBurstingMaxIops</c> property.
                /// </summary>
                /// <remarks>
                /// <para>
                /// If this JSON property is <see cref = "JsonValueKind.Undefined"/> then the value returned will be <see langword="null"/>.
                /// </para>
                /// </remarks>
                public Corvus.Json.JsonInt64? PaidBurstingMaxIops
                {
                    get
                    {
                        if ((this.backing & Backing.JsonElement) != 0)
                        {
                            if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                            {
                                return default;
                            }

                            if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.PaidBurstingMaxIopsUtf8, out JsonElement result))
                            {
                                if (result.ValueKind == JsonValueKind.Null || result.ValueKind == JsonValueKind.Undefined)
                                {
                                    return default;
                                }

                                return new(result);
                            }
                        }

                        if ((this.backing & Backing.Object) != 0)
                        {
                            if (this.objectBacking.TryGetValue(JsonPropertyNames.PaidBurstingMaxIops, out JsonAny result))
                            {
                                if (result.IsNullOrUndefined())
                                {
                                    return default;
                                }

                                return result.As<Corvus.Json.JsonInt64>();
                            }
                        }

                        return default;
                    }
                }

                /// <summary>
                /// Gets the (optional) <c>ProvisionedBandwidthMiBps</c> property.
                /// </summary>
                /// <remarks>
                /// <para>
                /// If this JSON property is <see cref = "JsonValueKind.Undefined"/> then the value returned will be <see langword="null"/>.
                /// </para>
                /// </remarks>
                public Corvus.Json.JsonInteger? ProvisionedBandwidthMiBps
                {
                    get
                    {
                        if ((this.backing & Backing.JsonElement) != 0)
                        {
                            if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                            {
                                return default;
                            }

                            if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.ProvisionedBandwidthMiBpsUtf8, out JsonElement result))
                            {
                                if (result.ValueKind == JsonValueKind.Null || result.ValueKind == JsonValueKind.Undefined)
                                {
                                    return default;
                                }

                                return new(result);
                            }
                        }

                        if ((this.backing & Backing.Object) != 0)
                        {
                            if (this.objectBacking.TryGetValue(JsonPropertyNames.ProvisionedBandwidthMiBps, out JsonAny result))
                            {
                                if (result.IsNullOrUndefined())
                                {
                                    return default;
                                }

                                return result.As<Corvus.Json.JsonInteger>();
                            }
                        }

                        return default;
                    }
                }

                /// <summary>
                /// Gets the (optional) <c>ProvisionedEgressMBps</c> property.
                /// </summary>
                /// <remarks>
                /// <para>
                /// If this JSON property is <see cref = "JsonValueKind.Undefined"/> then the value returned will be <see langword="null"/>.
                /// </para>
                /// </remarks>
                public Corvus.Json.JsonInteger? ProvisionedEgressMBps
                {
                    get
                    {
                        if ((this.backing & Backing.JsonElement) != 0)
                        {
                            if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                            {
                                return default;
                            }

                            if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.ProvisionedEgressMBpsUtf8, out JsonElement result))
                            {
                                if (result.ValueKind == JsonValueKind.Null || result.ValueKind == JsonValueKind.Undefined)
                                {
                                    return default;
                                }

                                return new(result);
                            }
                        }

                        if ((this.backing & Backing.Object) != 0)
                        {
                            if (this.objectBacking.TryGetValue(JsonPropertyNames.ProvisionedEgressMBps, out JsonAny result))
                            {
                                if (result.IsNullOrUndefined())
                                {
                                    return default;
                                }

                                return result.As<Corvus.Json.JsonInteger>();
                            }
                        }

                        return default;
                    }
                }

                /// <summary>
                /// Gets the (optional) <c>ProvisionedIngressMBps</c> property.
                /// </summary>
                /// <remarks>
                /// <para>
                /// If this JSON property is <see cref = "JsonValueKind.Undefined"/> then the value returned will be <see langword="null"/>.
                /// </para>
                /// </remarks>
                public Corvus.Json.JsonInteger? ProvisionedIngressMBps
                {
                    get
                    {
                        if ((this.backing & Backing.JsonElement) != 0)
                        {
                            if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                            {
                                return default;
                            }

                            if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.ProvisionedIngressMBpsUtf8, out JsonElement result))
                            {
                                if (result.ValueKind == JsonValueKind.Null || result.ValueKind == JsonValueKind.Undefined)
                                {
                                    return default;
                                }

                                return new(result);
                            }
                        }

                        if ((this.backing & Backing.Object) != 0)
                        {
                            if (this.objectBacking.TryGetValue(JsonPropertyNames.ProvisionedIngressMBps, out JsonAny result))
                            {
                                if (result.IsNullOrUndefined())
                                {
                                    return default;
                                }

                                return result.As<Corvus.Json.JsonInteger>();
                            }
                        }

                        return default;
                    }
                }

                /// <summary>
                /// Gets the (optional) <c>ProvisionedIops</c> property.
                /// </summary>
                /// <remarks>
                /// <para>
                /// If this JSON property is <see cref = "JsonValueKind.Undefined"/> then the value returned will be <see langword="null"/>.
                /// </para>
                /// </remarks>
                public Corvus.Json.JsonInteger? ProvisionedIops
                {
                    get
                    {
                        if ((this.backing & Backing.JsonElement) != 0)
                        {
                            if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                            {
                                return default;
                            }

                            if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.ProvisionedIopsUtf8, out JsonElement result))
                            {
                                if (result.ValueKind == JsonValueKind.Null || result.ValueKind == JsonValueKind.Undefined)
                                {
                                    return default;
                                }

                                return new(result);
                            }
                        }

                        if ((this.backing & Backing.Object) != 0)
                        {
                            if (this.objectBacking.TryGetValue(JsonPropertyNames.ProvisionedIops, out JsonAny result))
                            {
                                if (result.IsNullOrUndefined())
                                {
                                    return default;
                                }

                                return result.As<Corvus.Json.JsonInteger>();
                            }
                        }

                        return default;
                    }
                }

                /// <summary>
                /// Gets the <c>Quota</c> property.
                /// </summary>
                /// <remarks>
                /// <para>
                /// If the instance is valid, this property will not be <see cref = "JsonValueKind.Undefined"/>.
                /// </para>
                /// </remarks>
                public Corvus.Json.JsonInteger Quota
                {
                    get
                    {
                        if ((this.backing & Backing.JsonElement) != 0)
                        {
                            if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                            {
                                return default;
                            }

                            if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.QuotaUtf8, out JsonElement result))
                            {
                                return new(result);
                            }
                        }

                        if ((this.backing & Backing.Object) != 0)
                        {
                            if (this.objectBacking.TryGetValue(JsonPropertyNames.Quota, out JsonAny result))
                            {
                                return result.As<Corvus.Json.JsonInteger>();
                            }
                        }

                        return default;
                    }
                }

                /// <summary>
                /// Gets the (optional) <c>RemainingRetentionDays</c> property.
                /// </summary>
                /// <remarks>
                /// <para>
                /// If this JSON property is <see cref = "JsonValueKind.Undefined"/> then the value returned will be <see langword="null"/>.
                /// </para>
                /// </remarks>
                public Corvus.Json.JsonInteger? RemainingRetentionDays
                {
                    get
                    {
                        if ((this.backing & Backing.JsonElement) != 0)
                        {
                            if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                            {
                                return default;
                            }

                            if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.RemainingRetentionDaysUtf8, out JsonElement result))
                            {
                                if (result.ValueKind == JsonValueKind.Null || result.ValueKind == JsonValueKind.Undefined)
                                {
                                    return default;
                                }

                                return new(result);
                            }
                        }

                        if ((this.backing & Backing.Object) != 0)
                        {
                            if (this.objectBacking.TryGetValue(JsonPropertyNames.RemainingRetentionDays, out JsonAny result))
                            {
                                if (result.IsNullOrUndefined())
                                {
                                    return default;
                                }

                                return result.As<Corvus.Json.JsonInteger>();
                            }
                        }

                        return default;
                    }
                }

                /// <summary>
                /// Gets the (optional) <c>RootSquash</c> property.
                /// </summary>
                /// <remarks>
                /// <para>
                /// If this JSON property is <see cref = "JsonValueKind.Undefined"/> then the value returned will be <see langword="null"/>.
                /// </para>
                /// </remarks>
                public CompList.ServiceListSharesSegment.Content._200.ApplicationXml.AListedAzureStorageShareItemArray.AListedAzureStorageShareItem.PropertiesOfAShare.RootSquashEntity? RootSquash
                {
                    get
                    {
                        if ((this.backing & Backing.JsonElement) != 0)
                        {
                            if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                            {
                                return default;
                            }

                            if (this.jsonElementBacking.TryGetProperty(JsonPropertyNames.RootSquashUtf8, out JsonElement result))
                            {
                                if (result.ValueKind == JsonValueKind.Null || result.ValueKind == JsonValueKind.Undefined)
                                {
                                    return default;
                                }

                                return new(result);
                            }
                        }

                        if ((this.backing & Backing.Object) != 0)
                        {
                            if (this.objectBacking.TryGetValue(JsonPropertyNames.RootSquash, out JsonAny result))
                            {
                                if (result.IsNullOrUndefined())
                                {
                                    return default;
                                }

                                return result.As<CompList.ServiceListSharesSegment.Content._200.ApplicationXml.AListedAzureStorageShareItemArray.AListedAzureStorageShareItem.PropertiesOfAShare.RootSquashEntity>();
                            }
                        }

                        return default;
                    }
                }

                /// <inheritdoc/>
                public static PropertiesOfAShare FromProperties(IDictionary<JsonPropertyName, JsonAny> source)
                {
                    return new(source.Select(kvp => new JsonObjectProperty(kvp.Key, kvp.Value)).ToImmutableList());
                }

                /// <inheritdoc/>
                public static PropertiesOfAShare FromProperties(params (JsonPropertyName Name, JsonAny Value)[] source)
                {
                    return new(source.Select(s => new JsonObjectProperty(s.Name, s.Value.AsAny)).ToImmutableList());
                }

                /// <summary>
                /// Creates an instance of the type from the given immutable list of properties.
                /// </summary>
                /// <param name = "source">The list of properties.</param>
                /// <returns>An instance of the type initialized from the list of properties.</returns>
                public static PropertiesOfAShare FromProperties(ImmutableList<JsonObjectProperty> source)
                {
                    return new(source);
                }

                /// <summary>
                /// Creates an instance of a <see cref = "PropertiesOfAShare"/>.
                /// </summary>
                public static PropertiesOfAShare Create(in Corvus.Json.JsonString etag, in Corvus.Json.JsonString lastModified, in Corvus.Json.JsonInteger quota, in Corvus.Json.JsonString? accessTier = null, in Corvus.Json.JsonString? accessTierChangeTime = null, in Corvus.Json.JsonString? accessTierTransitionState = null, in Corvus.Json.JsonString? deletedTime = null, in Corvus.Json.JsonString? enabledProtocols = null, in Corvus.Json.JsonBoolean? enableSnapshotVirtualDirectoryAccess = null, in Corvus.Json.JsonInt64? includedBurstIops = null, in CompList.ServiceListSharesSegment.Content._200.ApplicationXml.AListedAzureStorageShareItemArray.AListedAzureStorageShareItem.PropertiesOfAShare.LeaseDurationEntity? leaseDuration = null, in CompList.ServiceListSharesSegment.Content._200.ApplicationXml.AListedAzureStorageShareItemArray.AListedAzureStorageShareItem.PropertiesOfAShare.LeaseStateOfTheShare? leaseState = null, in CompList.ServiceListSharesSegment.Content._200.ApplicationXml.AListedAzureStorageShareItemArray.AListedAzureStorageShareItem.PropertiesOfAShare.TheCurrentLeaseStatusOfTheShare? leaseStatus = null, in Corvus.Json.JsonInt64? maxBurstCreditsForIops = null, in Corvus.Json.JsonString? nextAllowedProvisionedBandwidthDowngradeTime = null, in Corvus.Json.JsonString? nextAllowedProvisionedIopsDowngradeTime = null, in Corvus.Json.JsonString? nextAllowedQuotaDowngradeTime = null, in Corvus.Json.JsonBoolean? paidBurstingEnabled = null, in Corvus.Json.JsonInt64? paidBurstingMaxBandwidthMibps = null, in Corvus.Json.JsonInt64? paidBurstingMaxIops = null, in Corvus.Json.JsonInteger? provisionedBandwidthMiBps = null, in Corvus.Json.JsonInteger? provisionedEgressMBps = null, in Corvus.Json.JsonInteger? provisionedIngressMBps = null, in Corvus.Json.JsonInteger? provisionedIops = null, in Corvus.Json.JsonInteger? remainingRetentionDays = null, in CompList.ServiceListSharesSegment.Content._200.ApplicationXml.AListedAzureStorageShareItemArray.AListedAzureStorageShareItem.PropertiesOfAShare.RootSquashEntity? rootSquash = null)
                {
                    var builder = ImmutableList.CreateBuilder<JsonObjectProperty>();
                    builder.Add(JsonPropertyNames.Etag, etag.AsAny);
                    builder.Add(JsonPropertyNames.LastModified, lastModified.AsAny);
                    builder.Add(JsonPropertyNames.Quota, quota.AsAny);
                    if (accessTier is not null)
                    {
                        builder.Add(JsonPropertyNames.AccessTier, accessTier.Value.AsAny);
                    }

                    if (accessTierChangeTime is not null)
                    {
                        builder.Add(JsonPropertyNames.AccessTierChangeTime, accessTierChangeTime.Value.AsAny);
                    }

                    if (accessTierTransitionState is not null)
                    {
                        builder.Add(JsonPropertyNames.AccessTierTransitionState, accessTierTransitionState.Value.AsAny);
                    }

                    if (deletedTime is not null)
                    {
                        builder.Add(JsonPropertyNames.DeletedTime, deletedTime.Value.AsAny);
                    }

                    if (enabledProtocols is not null)
                    {
                        builder.Add(JsonPropertyNames.EnabledProtocols, enabledProtocols.Value.AsAny);
                    }

                    if (enableSnapshotVirtualDirectoryAccess is not null)
                    {
                        builder.Add(JsonPropertyNames.EnableSnapshotVirtualDirectoryAccess, enableSnapshotVirtualDirectoryAccess.Value.AsAny);
                    }

                    if (includedBurstIops is not null)
                    {
                        builder.Add(JsonPropertyNames.IncludedBurstIops, includedBurstIops.Value.AsAny);
                    }

                    if (leaseDuration is not null)
                    {
                        builder.Add(JsonPropertyNames.LeaseDuration, leaseDuration.Value.AsAny);
                    }

                    if (leaseState is not null)
                    {
                        builder.Add(JsonPropertyNames.LeaseState, leaseState.Value.AsAny);
                    }

                    if (leaseStatus is not null)
                    {
                        builder.Add(JsonPropertyNames.LeaseStatus, leaseStatus.Value.AsAny);
                    }

                    if (maxBurstCreditsForIops is not null)
                    {
                        builder.Add(JsonPropertyNames.MaxBurstCreditsForIops, maxBurstCreditsForIops.Value.AsAny);
                    }

                    if (nextAllowedProvisionedBandwidthDowngradeTime is not null)
                    {
                        builder.Add(JsonPropertyNames.NextAllowedProvisionedBandwidthDowngradeTime, nextAllowedProvisionedBandwidthDowngradeTime.Value.AsAny);
                    }

                    if (nextAllowedProvisionedIopsDowngradeTime is not null)
                    {
                        builder.Add(JsonPropertyNames.NextAllowedProvisionedIopsDowngradeTime, nextAllowedProvisionedIopsDowngradeTime.Value.AsAny);
                    }

                    if (nextAllowedQuotaDowngradeTime is not null)
                    {
                        builder.Add(JsonPropertyNames.NextAllowedQuotaDowngradeTime, nextAllowedQuotaDowngradeTime.Value.AsAny);
                    }

                    if (paidBurstingEnabled is not null)
                    {
                        builder.Add(JsonPropertyNames.PaidBurstingEnabled, paidBurstingEnabled.Value.AsAny);
                    }

                    if (paidBurstingMaxBandwidthMibps is not null)
                    {
                        builder.Add(JsonPropertyNames.PaidBurstingMaxBandwidthMibps, paidBurstingMaxBandwidthMibps.Value.AsAny);
                    }

                    if (paidBurstingMaxIops is not null)
                    {
                        builder.Add(JsonPropertyNames.PaidBurstingMaxIops, paidBurstingMaxIops.Value.AsAny);
                    }

                    if (provisionedBandwidthMiBps is not null)
                    {
                        builder.Add(JsonPropertyNames.ProvisionedBandwidthMiBps, provisionedBandwidthMiBps.Value.AsAny);
                    }

                    if (provisionedEgressMBps is not null)
                    {
                        builder.Add(JsonPropertyNames.ProvisionedEgressMBps, provisionedEgressMBps.Value.AsAny);
                    }

                    if (provisionedIngressMBps is not null)
                    {
                        builder.Add(JsonPropertyNames.ProvisionedIngressMBps, provisionedIngressMBps.Value.AsAny);
                    }

                    if (provisionedIops is not null)
                    {
                        builder.Add(JsonPropertyNames.ProvisionedIops, provisionedIops.Value.AsAny);
                    }

                    if (remainingRetentionDays is not null)
                    {
                        builder.Add(JsonPropertyNames.RemainingRetentionDays, remainingRetentionDays.Value.AsAny);
                    }

                    if (rootSquash is not null)
                    {
                        builder.Add(JsonPropertyNames.RootSquash, rootSquash.Value.AsAny);
                    }

                    return new(builder.ToImmutable());
                }

                /// <inheritdoc/>
                public ImmutableList<JsonObjectProperty> AsPropertyBacking()
                {
                    return __CorvusObjectHelpers.GetPropertyBacking(this);
                }

                /// <inheritdoc/>
                public ImmutableList<JsonObjectProperty>.Builder AsPropertyBackingBuilder()
                {
                    return __CorvusObjectHelpers.GetPropertyBacking(this).ToBuilder();
                }

                /// <inheritdoc/>
                public JsonObjectEnumerator EnumerateObject()
                {
                    if ((this.backing & Backing.JsonElement) != 0)
                    {
                        return new(this.jsonElementBacking);
                    }

                    if ((this.backing & Backing.Object) != 0)
                    {
                        return new(this.objectBacking);
                    }

                    throw new InvalidOperationException();
                }

                /// <inheritdoc/>
                public bool HasProperties()
                {
                    if ((this.backing & Backing.Object) != 0)
                    {
                        return this.objectBacking.Count > 0;
                    }

                    if ((this.backing & Backing.JsonElement) != 0)
                    {
                        using JsonElement.ObjectEnumerator enumerator = this.jsonElementBacking.EnumerateObject();
                        return enumerator.MoveNext();
                    }

                    throw new InvalidOperationException();
                }

                /// <inheritdoc/>
                public bool HasProperty(in JsonPropertyName name)
                {
                    if ((this.backing & Backing.Object) != 0)
                    {
                        return this.objectBacking.ContainsKey(name);
                    }

                    if ((this.backing & Backing.JsonElement) != 0)
                    {
                        return name.TryGetProperty(this.jsonElementBacking, out JsonElement _);
                    }

                    throw new InvalidOperationException();
                }

                /// <inheritdoc/>
                public bool HasProperty(string name)
                {
                    if ((this.backing & Backing.Object) != 0)
                    {
                        return this.objectBacking.ContainsKey(name);
                    }

                    if ((this.backing & Backing.JsonElement) != 0)
                    {
                        return this.jsonElementBacking.TryGetProperty(name, out _);
                    }

                    throw new InvalidOperationException();
                }

                /// <inheritdoc/>
                public bool HasProperty(ReadOnlySpan<char> name)
                {
                    if ((this.backing & Backing.Object) != 0)
                    {
                        return this.objectBacking.ContainsKey(name);
                    }

                    if ((this.backing & Backing.JsonElement) != 0)
                    {
                        return this.jsonElementBacking.TryGetProperty(name, out _);
                    }

                    throw new InvalidOperationException();
                }

                /// <inheritdoc/>
                public bool HasProperty(ReadOnlySpan<byte> name)
                {
                    if ((this.backing & Backing.Object) != 0)
                    {
                        return this.objectBacking.ContainsKey(name);
                    }

                    if ((this.backing & Backing.JsonElement) != 0)
                    {
                        return this.jsonElementBacking.TryGetProperty(name, out _);
                    }

                    throw new InvalidOperationException();
                }

                /// <summary>
                /// Sets the (optional) <c>AccessTier</c> property.
                /// </summary>
                /// <param name = "value">The new property value</param>
                /// <returns>The instance with the property set.</returns>
                public PropertiesOfAShare WithAccessTier(in Corvus.Json.JsonString? value)
                {
                    return value.HasValue ? this.SetProperty(JsonPropertyNames.AccessTier, value.Value) : this.RemoveProperty(JsonPropertyNames.AccessTier);
                }

                /// <summary>
                /// Sets the (optional) <c>AccessTierChangeTime</c> property.
                /// </summary>
                /// <param name = "value">The new property value</param>
                /// <returns>The instance with the property set.</returns>
                public PropertiesOfAShare WithAccessTierChangeTime(in Corvus.Json.JsonString? value)
                {
                    return value.HasValue ? this.SetProperty(JsonPropertyNames.AccessTierChangeTime, value.Value) : this.RemoveProperty(JsonPropertyNames.AccessTierChangeTime);
                }

                /// <summary>
                /// Sets the (optional) <c>AccessTierTransitionState</c> property.
                /// </summary>
                /// <param name = "value">The new property value</param>
                /// <returns>The instance with the property set.</returns>
                public PropertiesOfAShare WithAccessTierTransitionState(in Corvus.Json.JsonString? value)
                {
                    return value.HasValue ? this.SetProperty(JsonPropertyNames.AccessTierTransitionState, value.Value) : this.RemoveProperty(JsonPropertyNames.AccessTierTransitionState);
                }

                /// <summary>
                /// Sets the (optional) <c>DeletedTime</c> property.
                /// </summary>
                /// <param name = "value">The new property value</param>
                /// <returns>The instance with the property set.</returns>
                public PropertiesOfAShare WithDeletedTime(in Corvus.Json.JsonString? value)
                {
                    return value.HasValue ? this.SetProperty(JsonPropertyNames.DeletedTime, value.Value) : this.RemoveProperty(JsonPropertyNames.DeletedTime);
                }

                /// <summary>
                /// Sets the (optional) <c>EnabledProtocols</c> property.
                /// </summary>
                /// <param name = "value">The new property value</param>
                /// <returns>The instance with the property set.</returns>
                public PropertiesOfAShare WithEnabledProtocols(in Corvus.Json.JsonString? value)
                {
                    return value.HasValue ? this.SetProperty(JsonPropertyNames.EnabledProtocols, value.Value) : this.RemoveProperty(JsonPropertyNames.EnabledProtocols);
                }

                /// <summary>
                /// Sets the (optional) <c>EnableSnapshotVirtualDirectoryAccess</c> property.
                /// </summary>
                /// <param name = "value">The new property value</param>
                /// <returns>The instance with the property set.</returns>
                public PropertiesOfAShare WithEnableSnapshotVirtualDirectoryAccess(in Corvus.Json.JsonBoolean? value)
                {
                    return value.HasValue ? this.SetProperty(JsonPropertyNames.EnableSnapshotVirtualDirectoryAccess, value.Value) : this.RemoveProperty(JsonPropertyNames.EnableSnapshotVirtualDirectoryAccess);
                }

                /// <summary>
                /// Sets the <c>Etag</c> property.
                /// </summary>
                /// <param name = "value">The new property value</param>
                /// <returns>The instance with the property set.</returns>
                public PropertiesOfAShare WithEtag(in Corvus.Json.JsonString value)
                {
                    return this.SetProperty(JsonPropertyNames.Etag, value);
                }

                /// <summary>
                /// Sets the (optional) <c>IncludedBurstIops</c> property.
                /// </summary>
                /// <param name = "value">The new property value</param>
                /// <returns>The instance with the property set.</returns>
                public PropertiesOfAShare WithIncludedBurstIops(in Corvus.Json.JsonInt64? value)
                {
                    return value.HasValue ? this.SetProperty(JsonPropertyNames.IncludedBurstIops, value.Value) : this.RemoveProperty(JsonPropertyNames.IncludedBurstIops);
                }

                /// <summary>
                /// Sets the <c>Last-Modified</c> property.
                /// </summary>
                /// <param name = "value">The new property value</param>
                /// <returns>The instance with the property set.</returns>
                public PropertiesOfAShare WithLastModified(in Corvus.Json.JsonString value)
                {
                    return this.SetProperty(JsonPropertyNames.LastModified, value);
                }

                /// <summary>
                /// Sets the (optional) <c>LeaseDuration</c> property.
                /// </summary>
                /// <param name = "value">The new property value</param>
                /// <returns>The instance with the property set.</returns>
                /// <remarks>
                /// <para>
                /// When a share is leased, specifies whether the lease is of infinite or fixed duration.
                /// </para>
                /// </remarks>
                public PropertiesOfAShare WithLeaseDuration(in CompList.ServiceListSharesSegment.Content._200.ApplicationXml.AListedAzureStorageShareItemArray.AListedAzureStorageShareItem.PropertiesOfAShare.LeaseDurationEntity? value)
                {
                    return value.HasValue ? this.SetProperty(JsonPropertyNames.LeaseDuration, value.Value) : this.RemoveProperty(JsonPropertyNames.LeaseDuration);
                }

                /// <summary>
                /// Sets the (optional) <c>LeaseState</c> property.
                /// </summary>
                /// <param name = "value">The new property value</param>
                /// <returns>The instance with the property set.</returns>
                /// <remarks>
                /// <para>
                /// Lease state of the share.
                /// </para>
                /// </remarks>
                public PropertiesOfAShare WithLeaseState(in CompList.ServiceListSharesSegment.Content._200.ApplicationXml.AListedAzureStorageShareItemArray.AListedAzureStorageShareItem.PropertiesOfAShare.LeaseStateOfTheShare? value)
                {
                    return value.HasValue ? this.SetProperty(JsonPropertyNames.LeaseState, value.Value) : this.RemoveProperty(JsonPropertyNames.LeaseState);
                }

                /// <summary>
                /// Sets the (optional) <c>LeaseStatus</c> property.
                /// </summary>
                /// <param name = "value">The new property value</param>
                /// <returns>The instance with the property set.</returns>
                /// <remarks>
                /// <para>
                /// The current lease status of the share.
                /// </para>
                /// </remarks>
                public PropertiesOfAShare WithLeaseStatus(in CompList.ServiceListSharesSegment.Content._200.ApplicationXml.AListedAzureStorageShareItemArray.AListedAzureStorageShareItem.PropertiesOfAShare.TheCurrentLeaseStatusOfTheShare? value)
                {
                    return value.HasValue ? this.SetProperty(JsonPropertyNames.LeaseStatus, value.Value) : this.RemoveProperty(JsonPropertyNames.LeaseStatus);
                }

                /// <summary>
                /// Sets the (optional) <c>MaxBurstCreditsForIops</c> property.
                /// </summary>
                /// <param name = "value">The new property value</param>
                /// <returns>The instance with the property set.</returns>
                public PropertiesOfAShare WithMaxBurstCreditsForIops(in Corvus.Json.JsonInt64? value)
                {
                    return value.HasValue ? this.SetProperty(JsonPropertyNames.MaxBurstCreditsForIops, value.Value) : this.RemoveProperty(JsonPropertyNames.MaxBurstCreditsForIops);
                }

                /// <summary>
                /// Sets the (optional) <c>NextAllowedProvisionedBandwidthDowngradeTime</c> property.
                /// </summary>
                /// <param name = "value">The new property value</param>
                /// <returns>The instance with the property set.</returns>
                public PropertiesOfAShare WithNextAllowedProvisionedBandwidthDowngradeTime(in Corvus.Json.JsonString? value)
                {
                    return value.HasValue ? this.SetProperty(JsonPropertyNames.NextAllowedProvisionedBandwidthDowngradeTime, value.Value) : this.RemoveProperty(JsonPropertyNames.NextAllowedProvisionedBandwidthDowngradeTime);
                }

                /// <summary>
                /// Sets the (optional) <c>NextAllowedProvisionedIopsDowngradeTime</c> property.
                /// </summary>
                /// <param name = "value">The new property value</param>
                /// <returns>The instance with the property set.</returns>
                public PropertiesOfAShare WithNextAllowedProvisionedIopsDowngradeTime(in Corvus.Json.JsonString? value)
                {
                    return value.HasValue ? this.SetProperty(JsonPropertyNames.NextAllowedProvisionedIopsDowngradeTime, value.Value) : this.RemoveProperty(JsonPropertyNames.NextAllowedProvisionedIopsDowngradeTime);
                }

                /// <summary>
                /// Sets the (optional) <c>NextAllowedQuotaDowngradeTime</c> property.
                /// </summary>
                /// <param name = "value">The new property value</param>
                /// <returns>The instance with the property set.</returns>
                public PropertiesOfAShare WithNextAllowedQuotaDowngradeTime(in Corvus.Json.JsonString? value)
                {
                    return value.HasValue ? this.SetProperty(JsonPropertyNames.NextAllowedQuotaDowngradeTime, value.Value) : this.RemoveProperty(JsonPropertyNames.NextAllowedQuotaDowngradeTime);
                }

                /// <summary>
                /// Sets the (optional) <c>PaidBurstingEnabled</c> property.
                /// </summary>
                /// <param name = "value">The new property value</param>
                /// <returns>The instance with the property set.</returns>
                public PropertiesOfAShare WithPaidBurstingEnabled(in Corvus.Json.JsonBoolean? value)
                {
                    return value.HasValue ? this.SetProperty(JsonPropertyNames.PaidBurstingEnabled, value.Value) : this.RemoveProperty(JsonPropertyNames.PaidBurstingEnabled);
                }

                /// <summary>
                /// Sets the (optional) <c>PaidBurstingMaxBandwidthMibps</c> property.
                /// </summary>
                /// <param name = "value">The new property value</param>
                /// <returns>The instance with the property set.</returns>
                public PropertiesOfAShare WithPaidBurstingMaxBandwidthMibps(in Corvus.Json.JsonInt64? value)
                {
                    return value.HasValue ? this.SetProperty(JsonPropertyNames.PaidBurstingMaxBandwidthMibps, value.Value) : this.RemoveProperty(JsonPropertyNames.PaidBurstingMaxBandwidthMibps);
                }

                /// <summary>
                /// Sets the (optional) <c>PaidBurstingMaxIops</c> property.
                /// </summary>
                /// <param name = "value">The new property value</param>
                /// <returns>The instance with the property set.</returns>
                public PropertiesOfAShare WithPaidBurstingMaxIops(in Corvus.Json.JsonInt64? value)
                {
                    return value.HasValue ? this.SetProperty(JsonPropertyNames.PaidBurstingMaxIops, value.Value) : this.RemoveProperty(JsonPropertyNames.PaidBurstingMaxIops);
                }

                /// <summary>
                /// Sets the (optional) <c>ProvisionedBandwidthMiBps</c> property.
                /// </summary>
                /// <param name = "value">The new property value</param>
                /// <returns>The instance with the property set.</returns>
                public PropertiesOfAShare WithProvisionedBandwidthMiBps(in Corvus.Json.JsonInteger? value)
                {
                    return value.HasValue ? this.SetProperty(JsonPropertyNames.ProvisionedBandwidthMiBps, value.Value) : this.RemoveProperty(JsonPropertyNames.ProvisionedBandwidthMiBps);
                }

                /// <summary>
                /// Sets the (optional) <c>ProvisionedEgressMBps</c> property.
                /// </summary>
                /// <param name = "value">The new property value</param>
                /// <returns>The instance with the property set.</returns>
                public PropertiesOfAShare WithProvisionedEgressMBps(in Corvus.Json.JsonInteger? value)
                {
                    return value.HasValue ? this.SetProperty(JsonPropertyNames.ProvisionedEgressMBps, value.Value) : this.RemoveProperty(JsonPropertyNames.ProvisionedEgressMBps);
                }

                /// <summary>
                /// Sets the (optional) <c>ProvisionedIngressMBps</c> property.
                /// </summary>
                /// <param name = "value">The new property value</param>
                /// <returns>The instance with the property set.</returns>
                public PropertiesOfAShare WithProvisionedIngressMBps(in Corvus.Json.JsonInteger? value)
                {
                    return value.HasValue ? this.SetProperty(JsonPropertyNames.ProvisionedIngressMBps, value.Value) : this.RemoveProperty(JsonPropertyNames.ProvisionedIngressMBps);
                }

                /// <summary>
                /// Sets the (optional) <c>ProvisionedIops</c> property.
                /// </summary>
                /// <param name = "value">The new property value</param>
                /// <returns>The instance with the property set.</returns>
                public PropertiesOfAShare WithProvisionedIops(in Corvus.Json.JsonInteger? value)
                {
                    return value.HasValue ? this.SetProperty(JsonPropertyNames.ProvisionedIops, value.Value) : this.RemoveProperty(JsonPropertyNames.ProvisionedIops);
                }

                /// <summary>
                /// Sets the <c>Quota</c> property.
                /// </summary>
                /// <param name = "value">The new property value</param>
                /// <returns>The instance with the property set.</returns>
                public PropertiesOfAShare WithQuota(in Corvus.Json.JsonInteger value)
                {
                    return this.SetProperty(JsonPropertyNames.Quota, value);
                }

                /// <summary>
                /// Sets the (optional) <c>RemainingRetentionDays</c> property.
                /// </summary>
                /// <param name = "value">The new property value</param>
                /// <returns>The instance with the property set.</returns>
                public PropertiesOfAShare WithRemainingRetentionDays(in Corvus.Json.JsonInteger? value)
                {
                    return value.HasValue ? this.SetProperty(JsonPropertyNames.RemainingRetentionDays, value.Value) : this.RemoveProperty(JsonPropertyNames.RemainingRetentionDays);
                }

                /// <summary>
                /// Sets the (optional) <c>RootSquash</c> property.
                /// </summary>
                /// <param name = "value">The new property value</param>
                /// <returns>The instance with the property set.</returns>
                public PropertiesOfAShare WithRootSquash(in CompList.ServiceListSharesSegment.Content._200.ApplicationXml.AListedAzureStorageShareItemArray.AListedAzureStorageShareItem.PropertiesOfAShare.RootSquashEntity? value)
                {
                    return value.HasValue ? this.SetProperty(JsonPropertyNames.RootSquash, value.Value) : this.RemoveProperty(JsonPropertyNames.RootSquash);
                }

                /// <summary>
                /// Get a property.
                /// </summary>
                /// <param name = "name">The name of the property.</param>
                /// <param name = "value">The value of the property.</param>
                /// <returns><c>True</c> if the property was present.</returns>
                /// <exception cref = "InvalidOperationException">The value is not an object.</exception>
                public bool TryGetProperty(in JsonPropertyName name, out JsonAny value)
                {
                    if ((this.backing & Backing.JsonElement) != 0)
                    {
                        if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                        {
                            value = default;
                            return false;
                        }

                        if (name.TryGetProperty(this.jsonElementBacking, out JsonElement element))
                        {
                            value = new(element);
                            return true;
                        }

                        value = default;
                        return false;
                    }

                    if ((this.backing & Backing.Object) != 0)
                    {
                        if (this.objectBacking.TryGetValue(name, out JsonAny result))
                        {
                            value = result;
                            return true;
                        }

                        value = default;
                        return false;
                    }

                    throw new InvalidOperationException();
                }

                /// <summary>
                /// Get a property.
                /// </summary>
                /// <param name = "name">The name of the property.</param>
                /// <param name = "value">The value of the property.</param>
                /// <returns><c>True</c> if the property was present.</returns>
                /// <exception cref = "InvalidOperationException">The value is not an object.</exception>
                public bool TryGetProperty(string name, out JsonAny value)
                {
                    if ((this.backing & Backing.JsonElement) != 0)
                    {
                        if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                        {
                            value = default;
                            return false;
                        }

                        if (this.jsonElementBacking.TryGetProperty(name, out JsonElement element))
                        {
                            value = new(element);
                            return true;
                        }

                        value = default;
                        return false;
                    }

                    if ((this.backing & Backing.Object) != 0)
                    {
                        if (this.objectBacking.TryGetValue(name, out JsonAny result))
                        {
                            value = result;
                            return true;
                        }

                        value = default;
                        return false;
                    }

                    throw new InvalidOperationException();
                }

                /// <summary>
                /// Get a property.
                /// </summary>
                /// <param name = "name">The name of the property.</param>
                /// <param name = "value">The value of the property.</param>
                /// <returns><c>True</c> if the property was present.</returns>
                /// <exception cref = "InvalidOperationException">The value is not an object.</exception>
                public bool TryGetProperty(ReadOnlySpan<char> name, out JsonAny value)
                {
                    if ((this.backing & Backing.JsonElement) != 0)
                    {
                        if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                        {
                            value = default;
                            return false;
                        }

                        if (this.jsonElementBacking.TryGetProperty(name, out JsonElement element))
                        {
                            value = new(element);
                            return true;
                        }

                        value = default;
                        return false;
                    }

                    if ((this.backing & Backing.Object) != 0)
                    {
                        if (this.objectBacking.TryGetValue(name, out JsonAny result))
                        {
                            value = result;
                            return true;
                        }

                        value = default;
                        return false;
                    }

                    throw new InvalidOperationException();
                }

                /// <summary>
                /// Get a property.
                /// </summary>
                /// <param name = "name">The name of the property.</param>
                /// <param name = "value">The value of the property.</param>
                /// <returns><c>True</c> if the property was present.</returns>
                /// <exception cref = "InvalidOperationException">The value is not an object.</exception>
                public bool TryGetProperty(ReadOnlySpan<byte> name, out JsonAny value)
                {
                    if ((this.backing & Backing.JsonElement) != 0)
                    {
                        if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                        {
                            value = default;
                            return false;
                        }

                        if (this.jsonElementBacking.TryGetProperty(name, out JsonElement element))
                        {
                            value = new(element);
                            return true;
                        }

                        value = default;
                        return false;
                    }

                    if ((this.backing & Backing.Object) != 0)
                    {
                        if (this.objectBacking.TryGetValue(name, out JsonAny result))
                        {
                            value = result;
                            return true;
                        }

                        value = default;
                        return false;
                    }

                    throw new InvalidOperationException();
                }

                /// <inheritdoc/>
                public bool TryGetProperty<TValue>(in JsonPropertyName name, out TValue value)
                    where TValue : struct, IJsonValue<TValue>
                {
                    if ((this.backing & Backing.JsonElement) != 0)
                    {
                        if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                        {
                            value = default;
                            return false;
                        }

                        if (name.TryGetProperty(this.jsonElementBacking, out JsonElement element))
                        {
#if NET8_0_OR_GREATER
                            value = TValue.FromJson(element);
#else
                            value = JsonValueNetStandard20Extensions.FromJsonElement<TValue>(element);
#endif
                            return true;
                        }

                        value = default;
                        return false;
                    }

                    if ((this.backing & Backing.Object) != 0)
                    {
                        if (this.objectBacking.TryGetValue(name, out JsonAny result))
                        {
#if NET8_0_OR_GREATER
                            value = TValue.FromAny(result);
#else
                            value = result.As<TValue>();
#endif
                            return true;
                        }

                        value = default;
                        return false;
                    }

                    throw new InvalidOperationException();
                }

                /// <inheritdoc/>
                public bool TryGetProperty<TValue>(string name, out TValue value)
                    where TValue : struct, IJsonValue<TValue>
                {
                    if ((this.backing & Backing.JsonElement) != 0)
                    {
                        if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                        {
                            value = default;
                            return false;
                        }

                        if (this.jsonElementBacking.TryGetProperty(name, out JsonElement element))
                        {
#if NET8_0_OR_GREATER
                            value = TValue.FromJson(element);
#else
                            value = JsonValueNetStandard20Extensions.FromJsonElement<TValue>(element);
#endif
                            return true;
                        }

                        value = default;
                        return false;
                    }

                    if ((this.backing & Backing.Object) != 0)
                    {
                        if (this.objectBacking.TryGetValue(name, out JsonAny result))
                        {
#if NET8_0_OR_GREATER
                            value = TValue.FromAny(result);
#else
                            value = result.As<TValue>();
#endif
                            return true;
                        }

                        value = default;
                        return false;
                    }

                    throw new InvalidOperationException();
                }

                /// <inheritdoc/>
                public bool TryGetProperty<TValue>(ReadOnlySpan<char> name, out TValue value)
                    where TValue : struct, IJsonValue<TValue>
                {
                    if ((this.backing & Backing.JsonElement) != 0)
                    {
                        if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                        {
                            value = default;
                            return false;
                        }

                        if (this.jsonElementBacking.TryGetProperty(name, out JsonElement element))
                        {
#if NET8_0_OR_GREATER
                            value = TValue.FromJson(element);
#else
                            value = JsonValueNetStandard20Extensions.FromJsonElement<TValue>(element);
#endif
                            return true;
                        }

                        value = default;
                        return false;
                    }

                    if ((this.backing & Backing.Object) != 0)
                    {
                        if (this.objectBacking.TryGetValue(name, out JsonAny result))
                        {
#if NET8_0_OR_GREATER
                            value = TValue.FromAny(result);
#else
                            value = result.As<TValue>();
#endif
                            return true;
                        }

                        value = default;
                        return false;
                    }

                    throw new InvalidOperationException();
                }

                /// <inheritdoc/>
                public bool TryGetProperty<TValue>(ReadOnlySpan<byte> name, out TValue value)
                    where TValue : struct, IJsonValue<TValue>
                {
                    if ((this.backing & Backing.JsonElement) != 0)
                    {
                        if (this.jsonElementBacking.ValueKind != JsonValueKind.Object)
                        {
                            value = default;
                            return false;
                        }

                        if (this.jsonElementBacking.TryGetProperty(name, out JsonElement element))
                        {
#if NET8_0_OR_GREATER
                            value = TValue.FromJson(element);
#else
                            value = JsonValueNetStandard20Extensions.FromJsonElement<TValue>(element);
#endif
                            return true;
                        }

                        value = default;
                        return false;
                    }

                    if ((this.backing & Backing.Object) != 0)
                    {
                        if (this.objectBacking.TryGetValue(name, out JsonAny result))
                        {
#if NET8_0_OR_GREATER
                            value = TValue.FromAny(result);
#else
                            value = result.As<TValue>();
#endif
                            return true;
                        }

                        value = default;
                        return false;
                    }

                    throw new InvalidOperationException();
                }

                /// <inheritdoc/>
                public PropertiesOfAShare SetProperty<TValue>(in JsonPropertyName name, TValue value)
                    where TValue : struct, IJsonValue
                {
                    return new(__CorvusObjectHelpers.GetPropertyBackingWith(this, name, value.AsAny));
                }

                /// <inheritdoc/>
                public PropertiesOfAShare RemoveProperty(in JsonPropertyName name)
                {
                    return new(__CorvusObjectHelpers.GetPropertyBackingWithout(this, name));
                }

                /// <inheritdoc/>
                public PropertiesOfAShare RemoveProperty(string name)
                {
                    return new(__CorvusObjectHelpers.GetPropertyBackingWithout(this, name));
                }

                /// <inheritdoc/>
                public PropertiesOfAShare RemoveProperty(ReadOnlySpan<char> name)
                {
                    return new(__CorvusObjectHelpers.GetPropertyBackingWithout(this, name));
                }

                /// <inheritdoc/>
                public PropertiesOfAShare RemoveProperty(ReadOnlySpan<byte> name)
                {
                    return new(__CorvusObjectHelpers.GetPropertyBackingWithout(this, name));
                }

                /// <summary>
                /// Provides UTF8 and string versions of the JSON property names on the object.
                /// </summary>
                public static class JsonPropertyNames
                {
                    /// <summary>
                    /// Gets the JSON property name for <see cref = "AccessTier"/>.
                    /// </summary>
                    public const string AccessTier = "AccessTier";
                    /// <summary>
                    /// Gets the JSON property name for <see cref = "AccessTierChangeTime"/>.
                    /// </summary>
                    public const string AccessTierChangeTime = "AccessTierChangeTime";
                    /// <summary>
                    /// Gets the JSON property name for <see cref = "AccessTierTransitionState"/>.
                    /// </summary>
                    public const string AccessTierTransitionState = "AccessTierTransitionState";
                    /// <summary>
                    /// Gets the JSON property name for <see cref = "DeletedTime"/>.
                    /// </summary>
                    public const string DeletedTime = "DeletedTime";
                    /// <summary>
                    /// Gets the JSON property name for <see cref = "EnabledProtocols"/>.
                    /// </summary>
                    public const string EnabledProtocols = "EnabledProtocols";
                    /// <summary>
                    /// Gets the JSON property name for <see cref = "EnableSnapshotVirtualDirectoryAccess"/>.
                    /// </summary>
                    public const string EnableSnapshotVirtualDirectoryAccess = "EnableSnapshotVirtualDirectoryAccess";
                    /// <summary>
                    /// Gets the JSON property name for <see cref = "Etag"/>.
                    /// </summary>
                    public const string Etag = "Etag";
                    /// <summary>
                    /// Gets the JSON property name for <see cref = "IncludedBurstIops"/>.
                    /// </summary>
                    public const string IncludedBurstIops = "IncludedBurstIops";
                    /// <summary>
                    /// Gets the JSON property name for <see cref = "LastModified"/>.
                    /// </summary>
                    public const string LastModified = "Last-Modified";
                    /// <summary>
                    /// Gets the JSON property name for <see cref = "LeaseDuration"/>.
                    /// </summary>
                    public const string LeaseDuration = "LeaseDuration";
                    /// <summary>
                    /// Gets the JSON property name for <see cref = "LeaseState"/>.
                    /// </summary>
                    public const string LeaseState = "LeaseState";
                    /// <summary>
                    /// Gets the JSON property name for <see cref = "LeaseStatus"/>.
                    /// </summary>
                    public const string LeaseStatus = "LeaseStatus";
                    /// <summary>
                    /// Gets the JSON property name for <see cref = "MaxBurstCreditsForIops"/>.
                    /// </summary>
                    public const string MaxBurstCreditsForIops = "MaxBurstCreditsForIops";
                    /// <summary>
                    /// Gets the JSON property name for <see cref = "NextAllowedProvisionedBandwidthDowngradeTime"/>.
                    /// </summary>
                    public const string NextAllowedProvisionedBandwidthDowngradeTime = "NextAllowedProvisionedBandwidthDowngradeTime";
                    /// <summary>
                    /// Gets the JSON property name for <see cref = "NextAllowedProvisionedIopsDowngradeTime"/>.
                    /// </summary>
                    public const string NextAllowedProvisionedIopsDowngradeTime = "NextAllowedProvisionedIopsDowngradeTime";
                    /// <summary>
                    /// Gets the JSON property name for <see cref = "NextAllowedQuotaDowngradeTime"/>.
                    /// </summary>
                    public const string NextAllowedQuotaDowngradeTime = "NextAllowedQuotaDowngradeTime";
                    /// <summary>
                    /// Gets the JSON property name for <see cref = "PaidBurstingEnabled"/>.
                    /// </summary>
                    public const string PaidBurstingEnabled = "PaidBurstingEnabled";
                    /// <summary>
                    /// Gets the JSON property name for <see cref = "PaidBurstingMaxBandwidthMibps"/>.
                    /// </summary>
                    public const string PaidBurstingMaxBandwidthMibps = "PaidBurstingMaxBandwidthMibps";
                    /// <summary>
                    /// Gets the JSON property name for <see cref = "PaidBurstingMaxIops"/>.
                    /// </summary>
                    public const string PaidBurstingMaxIops = "PaidBurstingMaxIops";
                    /// <summary>
                    /// Gets the JSON property name for <see cref = "ProvisionedBandwidthMiBps"/>.
                    /// </summary>
                    public const string ProvisionedBandwidthMiBps = "ProvisionedBandwidthMiBps";
                    /// <summary>
                    /// Gets the JSON property name for <see cref = "ProvisionedEgressMBps"/>.
                    /// </summary>
                    public const string ProvisionedEgressMBps = "ProvisionedEgressMBps";
                    /// <summary>
                    /// Gets the JSON property name for <see cref = "ProvisionedIngressMBps"/>.
                    /// </summary>
                    public const string ProvisionedIngressMBps = "ProvisionedIngressMBps";
                    /// <summary>
                    /// Gets the JSON property name for <see cref = "ProvisionedIops"/>.
                    /// </summary>
                    public const string ProvisionedIops = "ProvisionedIops";
                    /// <summary>
                    /// Gets the JSON property name for <see cref = "Quota"/>.
                    /// </summary>
                    public const string Quota = "Quota";
                    /// <summary>
                    /// Gets the JSON property name for <see cref = "RemainingRetentionDays"/>.
                    /// </summary>
                    public const string RemainingRetentionDays = "RemainingRetentionDays";
                    /// <summary>
                    /// Gets the JSON property name for <see cref = "RootSquash"/>.
                    /// </summary>
                    public const string RootSquash = "RootSquash";
                    /// <summary>
                    /// Gets the JSON property name for <see cref = "AccessTier"/>.
                    /// </summary>
                    public static ReadOnlySpan<byte> AccessTierUtf8 => "AccessTier"u8;
                    /// <summary>
                    /// Gets the JSON property name for <see cref = "AccessTierChangeTime"/>.
                    /// </summary>
                    public static ReadOnlySpan<byte> AccessTierChangeTimeUtf8 => "AccessTierChangeTime"u8;
                    /// <summary>
                    /// Gets the JSON property name for <see cref = "AccessTierTransitionState"/>.
                    /// </summary>
                    public static ReadOnlySpan<byte> AccessTierTransitionStateUtf8 => "AccessTierTransitionState"u8;
                    /// <summary>
                    /// Gets the JSON property name for <see cref = "DeletedTime"/>.
                    /// </summary>
                    public static ReadOnlySpan<byte> DeletedTimeUtf8 => "DeletedTime"u8;
                    /// <summary>
                    /// Gets the JSON property name for <see cref = "EnabledProtocols"/>.
                    /// </summary>
                    public static ReadOnlySpan<byte> EnabledProtocolsUtf8 => "EnabledProtocols"u8;
                    /// <summary>
                    /// Gets the JSON property name for <see cref = "EnableSnapshotVirtualDirectoryAccess"/>.
                    /// </summary>
                    public static ReadOnlySpan<byte> EnableSnapshotVirtualDirectoryAccessUtf8 => "EnableSnapshotVirtualDirectoryAccess"u8;
                    /// <summary>
                    /// Gets the JSON property name for <see cref = "Etag"/>.
                    /// </summary>
                    public static ReadOnlySpan<byte> EtagUtf8 => "Etag"u8;
                    /// <summary>
                    /// Gets the JSON property name for <see cref = "IncludedBurstIops"/>.
                    /// </summary>
                    public static ReadOnlySpan<byte> IncludedBurstIopsUtf8 => "IncludedBurstIops"u8;
                    /// <summary>
                    /// Gets the JSON property name for <see cref = "LastModified"/>.
                    /// </summary>
                    public static ReadOnlySpan<byte> LastModifiedUtf8 => "Last-Modified"u8;
                    /// <summary>
                    /// Gets the JSON property name for <see cref = "LeaseDuration"/>.
                    /// </summary>
                    public static ReadOnlySpan<byte> LeaseDurationUtf8 => "LeaseDuration"u8;
                    /// <summary>
                    /// Gets the JSON property name for <see cref = "LeaseState"/>.
                    /// </summary>
                    public static ReadOnlySpan<byte> LeaseStateUtf8 => "LeaseState"u8;
                    /// <summary>
                    /// Gets the JSON property name for <see cref = "LeaseStatus"/>.
                    /// </summary>
                    public static ReadOnlySpan<byte> LeaseStatusUtf8 => "LeaseStatus"u8;
                    /// <summary>
                    /// Gets the JSON property name for <see cref = "MaxBurstCreditsForIops"/>.
                    /// </summary>
                    public static ReadOnlySpan<byte> MaxBurstCreditsForIopsUtf8 => "MaxBurstCreditsForIops"u8;
                    /// <summary>
                    /// Gets the JSON property name for <see cref = "NextAllowedProvisionedBandwidthDowngradeTime"/>.
                    /// </summary>
                    public static ReadOnlySpan<byte> NextAllowedProvisionedBandwidthDowngradeTimeUtf8 => "NextAllowedProvisionedBandwidthDowngradeTime"u8;
                    /// <summary>
                    /// Gets the JSON property name for <see cref = "NextAllowedProvisionedIopsDowngradeTime"/>.
                    /// </summary>
                    public static ReadOnlySpan<byte> NextAllowedProvisionedIopsDowngradeTimeUtf8 => "NextAllowedProvisionedIopsDowngradeTime"u8;
                    /// <summary>
                    /// Gets the JSON property name for <see cref = "NextAllowedQuotaDowngradeTime"/>.
                    /// </summary>
                    public static ReadOnlySpan<byte> NextAllowedQuotaDowngradeTimeUtf8 => "NextAllowedQuotaDowngradeTime"u8;
                    /// <summary>
                    /// Gets the JSON property name for <see cref = "PaidBurstingEnabled"/>.
                    /// </summary>
                    public static ReadOnlySpan<byte> PaidBurstingEnabledUtf8 => "PaidBurstingEnabled"u8;
                    /// <summary>
                    /// Gets the JSON property name for <see cref = "PaidBurstingMaxBandwidthMibps"/>.
                    /// </summary>
                    public static ReadOnlySpan<byte> PaidBurstingMaxBandwidthMibpsUtf8 => "PaidBurstingMaxBandwidthMibps"u8;
                    /// <summary>
                    /// Gets the JSON property name for <see cref = "PaidBurstingMaxIops"/>.
                    /// </summary>
                    public static ReadOnlySpan<byte> PaidBurstingMaxIopsUtf8 => "PaidBurstingMaxIops"u8;
                    /// <summary>
                    /// Gets the JSON property name for <see cref = "ProvisionedBandwidthMiBps"/>.
                    /// </summary>
                    public static ReadOnlySpan<byte> ProvisionedBandwidthMiBpsUtf8 => "ProvisionedBandwidthMiBps"u8;
                    /// <summary>
                    /// Gets the JSON property name for <see cref = "ProvisionedEgressMBps"/>.
                    /// </summary>
                    public static ReadOnlySpan<byte> ProvisionedEgressMBpsUtf8 => "ProvisionedEgressMBps"u8;
                    /// <summary>
                    /// Gets the JSON property name for <see cref = "ProvisionedIngressMBps"/>.
                    /// </summary>
                    public static ReadOnlySpan<byte> ProvisionedIngressMBpsUtf8 => "ProvisionedIngressMBps"u8;
                    /// <summary>
                    /// Gets the JSON property name for <see cref = "ProvisionedIops"/>.
                    /// </summary>
                    public static ReadOnlySpan<byte> ProvisionedIopsUtf8 => "ProvisionedIops"u8;
                    /// <summary>
                    /// Gets the JSON property name for <see cref = "Quota"/>.
                    /// </summary>
                    public static ReadOnlySpan<byte> QuotaUtf8 => "Quota"u8;
                    /// <summary>
                    /// Gets the JSON property name for <see cref = "RemainingRetentionDays"/>.
                    /// </summary>
                    public static ReadOnlySpan<byte> RemainingRetentionDaysUtf8 => "RemainingRetentionDays"u8;
                    /// <summary>
                    /// Gets the JSON property name for <see cref = "RootSquash"/>.
                    /// </summary>
                    public static ReadOnlySpan<byte> RootSquashUtf8 => "RootSquash"u8;
                }

                private static class __CorvusObjectHelpers
                {
                    /// <summary>
                    /// Builds an <see cref = "ImmutableList{JsonObjectProperty}"/> from the object.
                    /// </summary>
                    /// <returns>An immutable list of <see cref = "JsonAny"/> built from the object.</returns>
                    /// <exception cref = "InvalidOperationException">The value is not an object.</exception>
                    public static ImmutableList<JsonObjectProperty> GetPropertyBacking(in PropertiesOfAShare that)
                    {
                        if ((that.backing & Backing.Object) != 0)
                        {
                            return that.objectBacking;
                        }

                        if ((that.backing & Backing.JsonElement) != 0)
                        {
                            return PropertyBackingBuilders.GetPropertyBackingBuilder(that.jsonElementBacking).ToImmutable();
                        }

                        throw new InvalidOperationException();
                    }

                    /// <summary>
                    /// Builds an <see cref = "ImmutableList{JsonObjectProperty}"/> from the object, without a specific property.
                    /// </summary>
                    /// <returns>An immutable list of <see cref = "JsonObjectProperty"/>, built from the existing object, without the given property.</returns>
                    /// <exception cref = "InvalidOperationException">The value is not an object.</exception>
                    public static ImmutableList<JsonObjectProperty> GetPropertyBackingWithout(in PropertiesOfAShare that, in JsonPropertyName name)
                    {
                        if ((that.backing & Backing.Object) != 0)
                        {
                            return that.objectBacking.Remove(name);
                        }

                        if ((that.backing & Backing.JsonElement) != 0)
                        {
                            return PropertyBackingBuilders.GetPropertyBackingBuilderWithout(that.jsonElementBacking, name).ToImmutable();
                        }

                        throw new InvalidOperationException();
                    }

                    /// <summary>
                    /// Builds an <see cref = "ImmutableList{JsonObjectProperty}"/> from the object, without a specific property.
                    /// </summary>
                    /// <returns>An immutable list of <see cref = "JsonObjectProperty"/>, built from the existing object, without the given property.</returns>
                    /// <exception cref = "InvalidOperationException">The value is not an object.</exception>
                    public static ImmutableList<JsonObjectProperty> GetPropertyBackingWithout(in PropertiesOfAShare that, ReadOnlySpan<char> name)
                    {
                        if ((that.backing & Backing.Object) != 0)
                        {
                            return that.objectBacking.Remove(name);
                        }

                        if ((that.backing & Backing.JsonElement) != 0)
                        {
                            return PropertyBackingBuilders.GetPropertyBackingBuilderWithout(that.jsonElementBacking, name).ToImmutable();
                        }

                        throw new InvalidOperationException();
                    }

                    /// <summary>
                    /// Builds an <see cref = "ImmutableList{JsonObjectProperty}"/> from the object, without a specific property.
                    /// </summary>
                    /// <returns>An immutable list of <see cref = "JsonObjectProperty"/>, built from the existing object, without the given property.</returns>
                    /// <exception cref = "InvalidOperationException">The value is not an object.</exception>
                    public static ImmutableList<JsonObjectProperty> GetPropertyBackingWithout(in PropertiesOfAShare that, ReadOnlySpan<byte> name)
                    {
                        if ((that.backing & Backing.Object) != 0)
                        {
                            return that.objectBacking.Remove(name);
                        }

                        if ((that.backing & Backing.JsonElement) != 0)
                        {
                            return PropertyBackingBuilders.GetPropertyBackingBuilderWithout(that.jsonElementBacking, name).ToImmutable();
                        }

                        throw new InvalidOperationException();
                    }

                    /// <summary>
                    /// Builds an <see cref = "ImmutableList{JsonObjectProperty}"/> from the object, without a specific property.
                    /// </summary>
                    /// <returns>An immutable list of <see cref = "JsonObjectProperty"/>, built from the existing object, without the given property.</returns>
                    /// <exception cref = "InvalidOperationException">The value is not an object.</exception>
                    public static ImmutableList<JsonObjectProperty> GetPropertyBackingWithout(in PropertiesOfAShare that, string name)
                    {
                        if ((that.backing & Backing.Object) != 0)
                        {
                            return that.objectBacking.Remove(name);
                        }

                        if ((that.backing & Backing.JsonElement) != 0)
                        {
                            return PropertyBackingBuilders.GetPropertyBackingBuilderWithout(that.jsonElementBacking, name).ToImmutable();
                        }

                        throw new InvalidOperationException();
                    }

                    /// <summary>
                    /// Builds an <see cref = "ImmutableList{JsonObjectProperty}"/> from the object, without a specific property.
                    /// </summary>
                    /// <returns>An immutable list of <see cref = "JsonObjectProperty"/>, built from the existing object, with the given property.</returns>
                    /// <exception cref = "InvalidOperationException">The value is not an object.</exception>
                    public static ImmutableList<JsonObjectProperty> GetPropertyBackingWith(in PropertiesOfAShare that, in JsonPropertyName name, in JsonAny value)
                    {
                        if ((that.backing & Backing.Object) != 0)
                        {
                            return that.objectBacking.SetItem(name, value);
                        }

                        if ((that.backing & Backing.JsonElement) != 0)
                        {
                            return PropertyBackingBuilders.GetPropertyBackingBuilderReplacing(that.jsonElementBacking, name, value).ToImmutable();
                        }

                        throw new InvalidOperationException();
                    }
                }
            }
        }
    }
}
