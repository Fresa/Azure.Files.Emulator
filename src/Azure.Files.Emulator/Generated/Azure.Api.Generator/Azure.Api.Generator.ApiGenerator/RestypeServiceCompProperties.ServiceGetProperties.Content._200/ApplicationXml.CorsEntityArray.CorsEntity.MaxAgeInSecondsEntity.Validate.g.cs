//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System.Runtime.CompilerServices;
using System.Text.Json;
using Corvus.Json;

namespace RestypeServiceCompProperties.ServiceGetProperties.Content._200;
/// <summary>
/// Generated from JSON Schema.
/// </summary>
/// <remarks>
/// <para>
/// Storage service properties.
/// </para>
/// </remarks>
public readonly partial struct ApplicationXml
{
    /// <summary>
    /// Generated from JSON Schema.
    /// </summary>
    /// <remarks>
    /// <para>
    /// The set of CORS rules.
    /// </para>
    /// </remarks>
    public readonly partial struct CorsEntityArray
    {
        /// <summary>
        /// Generated from JSON Schema.
        /// </summary>
        /// <remarks>
        /// <para>
        /// CORS is an HTTP feature that enables a web application running under one domain to access resources in another domain. Web browsers implement a security restriction known as same-origin policy that prevents a web page from calling APIs in a different domain; CORS provides a secure way to allow one domain (the origin domain) to call APIs in another domain.
        /// </para>
        /// </remarks>
        public readonly partial struct CorsEntity
        {
            /// <summary>
            /// Generated from JSON Schema.
            /// </summary>
            /// <remarks>
            /// <para>
            /// The maximum amount time that a browser should cache the preflight OPTIONS request.
            /// </para>
            /// </remarks>
            public readonly partial struct MaxAgeInSecondsEntity
            {
                /// <inheritdoc/>
                public ValidationContext Validate(in ValidationContext validationContext, ValidationLevel level = ValidationLevel.Flag)
                {
                    ValidationContext result = validationContext;
                    if (level > ValidationLevel.Flag && !result.IsUsingResults)
                    {
                        result = result.UsingResults();
                    }

                    if (level > ValidationLevel.Basic)
                    {
                        if (!result.IsUsingStack)
                        {
                            result = result.UsingStack();
                        }

                        result = result.PushSchemaLocation("#/properties/Cors/items/properties/MaxAgeInSeconds");
                    }

                    JsonValueKind valueKind = this.ValueKind;
                    result = CorvusValidation.TypeValidationHandler(this, valueKind, result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }

                    result = CorvusValidation.NumberValidationHandler(this, valueKind, result, level);
                    if (level == ValidationLevel.Flag && !result.IsValid)
                    {
                        return result;
                    }

                    if (level > ValidationLevel.Basic)
                    {
                        result = result.PopLocation();
                    }

                    return result;
                }

                /// <summary>
                /// Validation constants for the type.
                /// </summary>
                public static partial class CorvusValidation
                {
                    /// <summary>
                    /// A constant for the <c>minimum</c> keyword.
                    /// </summary>
                    public static readonly BinaryJsonNumber Minimum = new(0);
                    /// <summary>
                    /// Core type validation.
                    /// </summary>
                    /// <param name = "value">The value to validate.</param>
                    /// <param name = "valueKind">The <see cref = "JsonValueKind"/> of the value to validate.</param>
                    /// <param name = "validationContext">The current validation context.</param>
                    /// <param name = "level">The current validation level.</param>
                    /// <returns>The resulting validation context after validation.</returns>
                    [MethodImpl(MethodImplOptions.AggressiveInlining)]
                    internal static ValidationContext TypeValidationHandler(in MaxAgeInSecondsEntity value, JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level = ValidationLevel.Flag)
                    {
                        return Corvus.Json.ValidateWithoutCoreType.TypeInteger(value, validationContext, level, "type");
                    }

                    /// <summary>
                    /// Numeric validation.
                    /// </summary>
                    /// <param name = "value">The value to validate.</param>
                    /// <param name = "valueKind">The <see cref = "JsonValueKind"/> of the value to validate.</param>
                    /// <param name = "validationContext">The current validation context.</param>
                    /// <param name = "level">The current validation level.</param>
                    /// <returns>The resulting validation context after validation.</returns>
                    [MethodImpl(MethodImplOptions.AggressiveInlining)]
                    internal static ValidationContext NumberValidationHandler(in MaxAgeInSecondsEntity value, JsonValueKind valueKind, in ValidationContext validationContext, ValidationLevel level = ValidationLevel.Flag)
                    {
                        if (valueKind != JsonValueKind.Number)
                        {
                            if (level == ValidationLevel.Verbose)
                            {
                                ValidationContext ignoredResult = validationContext;
                                ignoredResult = ignoredResult.WithResult(isValid: true, "Validation minimum - ignored because the value is not a number", "minimum");
                                return ignoredResult;
                            }

                            return validationContext;
                        }

                        ValidationContext result = validationContext;
                        if ((value.HasJsonElementBacking ? BinaryJsonNumber.Compare(value.AsJsonElement, Minimum) : BinaryJsonNumber.Compare(value.AsBinaryJsonNumber, Minimum)) >= 0)
                        {
                            if (level == ValidationLevel.Verbose)
                            {
                                result = result.WithResult(isValid: true, $"Validation minimum - {value} is greater than or equal to {Minimum}", "minimum");
                            }
                        }
                        else
                        {
                            if (level >= ValidationLevel.Detailed)
                            {
                                result = result.WithResult(isValid: false, $"Validation minimum - {value} is less than {Minimum}", "minimum");
                            }
                            else if (level >= ValidationLevel.Basic)
                            {
                                result = result.WithResult(isValid: false, "Validation minimum - is less than the required value.", "minimum");
                            }
                            else
                            {
                                return ValidationContext.InvalidContext;
                            }
                        }

                        return result;
                    }
                }
            }
        }
    }
}
